/*
 * Svix API
 * Welcome to the Svix API documentation!  Useful links: [Homepage](https://www.svix.com) | [Support email](mailto:support+docs@svix.com) | [Blog](https://www.svix.com/blog/) | [Slack Community](https://www.svix.com/slack/)  # Introduction  This is the reference documentation and schemas for the [Svix webhook service](https://www.svix.com) API. For tutorials and other documentation please refer to [the documentation](https://docs.svix.com).  ## Main concepts  In Svix you have four important entities you will be interacting with:  - `messages`: these are the webhooks being sent. They can have contents and a few other properties. - `application`: this is where `messages` are sent to. Usually you want to create one application for each user on your platform. - `endpoint`: endpoints are the URLs messages will be sent to. Each application can have multiple `endpoints` and each message sent to that application will be sent to all of them (unless they are not subscribed to the sent event type). - `event-type`: event types are identifiers denoting the type of the message being sent. Event types are primarily used to decide which events are sent to which endpoint.   ## Authentication  Get your authentication token (`AUTH_TOKEN`) from the [Svix dashboard](https://dashboard.svix.com) and use it as part of the `Authorization` header as such: `Authorization: Bearer ${AUTH_TOKEN}`. For more information on authentication, please refer to the [authentication token docs](https://docs.svix.com/api-keys).     ## Code samples  The code samples assume you already have the respective libraries installed and you know how to use them. For the latest information on how to do that, please refer to [the documentation](https://docs.svix.com/).   ## Idempotency  Svix supports [idempotency](https://en.wikipedia.org/wiki/Idempotence) for safely retrying requests without accidentally performing the same operation twice. This is useful when an API call is disrupted in transit and you do not receive a response.  To perform an idempotent request, pass the idempotency key in the `Idempotency-Key` header to the request. The idempotency key should be a unique value generated by the client. You can create the key in however way you like, though we suggest using UUID v4, or any other string with enough entropy to avoid collisions.  Svix's idempotency works by saving the resulting status code and body of the first request made for any given idempotency key for any successful request. Subsequent requests with the same key return the same result for a period of up to 12 hours.  Please note that idempotency is only supported for `POST` requests.   ## Cross-Origin Resource Sharing  This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/). And that allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site. 
 *
 * The version of the OpenAPI document: 1.20.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AppPortalAccessIn;
import com.konfigthis.client.model.AppPortalAccessOut;
import com.konfigthis.client.model.ApplicationTokenExpireIn;
import com.konfigthis.client.model.DashboardAccessOut;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AuthenticationApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AuthenticationApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AuthenticationApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call expireAppTokensCall(String appId, ApplicationTokenExpireIn applicationTokenExpireIn, String idempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = applicationTokenExpireIn;

        // create path and map variables
        String localVarPath = "/api/v1/auth/app/{app_id}/expire-all"
            .replace("{" + "app_id" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (idempotencyKey != null) {
            localVarHeaderParams.put("idempotency-key", localVarApiClient.parameterToString(idempotencyKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call expireAppTokensValidateBeforeCall(String appId, ApplicationTokenExpireIn applicationTokenExpireIn, String idempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling expireAppTokens(Async)");
        }

        // verify the required parameter 'applicationTokenExpireIn' is set
        if (applicationTokenExpireIn == null) {
            throw new ApiException("Missing the required parameter 'applicationTokenExpireIn' when calling expireAppTokens(Async)");
        }

        return expireAppTokensCall(appId, applicationTokenExpireIn, idempotencyKey, _callback);

    }


    private ApiResponse<Void> expireAppTokensWithHttpInfo(String appId, ApplicationTokenExpireIn applicationTokenExpireIn, String idempotencyKey) throws ApiException {
        okhttp3.Call localVarCall = expireAppTokensValidateBeforeCall(appId, applicationTokenExpireIn, idempotencyKey, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call expireAppTokensAsync(String appId, ApplicationTokenExpireIn applicationTokenExpireIn, String idempotencyKey, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = expireAppTokensValidateBeforeCall(appId, applicationTokenExpireIn, idempotencyKey, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ExpireAppTokensRequestBuilder {
        private final String appId;
        private Long expiry;
        private String idempotencyKey;

        private ExpireAppTokensRequestBuilder(String appId) {
            this.appId = appId;
        }

        /**
         * Set expiry
         * @param expiry How many seconds until the old key is expired. (optional)
         * @return ExpireAppTokensRequestBuilder
         */
        public ExpireAppTokensRequestBuilder expiry(Long expiry) {
            this.expiry = expiry;
            return this;
        }
        
        /**
         * Set idempotencyKey
         * @param idempotencyKey The request&#39;s idempotency key (optional)
         * @return ExpireAppTokensRequestBuilder
         */
        public ExpireAppTokensRequestBuilder idempotencyKey(String idempotencyKey) {
            this.idempotencyKey = idempotencyKey;
            return this;
        }
        
        /**
         * Build call for expireAppTokens
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ApplicationTokenExpireIn applicationTokenExpireIn = buildBodyParams();
            return expireAppTokensCall(appId, applicationTokenExpireIn, idempotencyKey, _callback);
        }

        private ApplicationTokenExpireIn buildBodyParams() {
            ApplicationTokenExpireIn applicationTokenExpireIn = new ApplicationTokenExpireIn();
            applicationTokenExpireIn.expiry(this.expiry);
            return applicationTokenExpireIn;
        }

        /**
         * Execute expireAppTokens request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            ApplicationTokenExpireIn applicationTokenExpireIn = buildBodyParams();
            expireAppTokensWithHttpInfo(appId, applicationTokenExpireIn, idempotencyKey);
        }

        /**
         * Execute expireAppTokens request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            ApplicationTokenExpireIn applicationTokenExpireIn = buildBodyParams();
            return expireAppTokensWithHttpInfo(appId, applicationTokenExpireIn, idempotencyKey);
        }

        /**
         * Execute expireAppTokens request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            ApplicationTokenExpireIn applicationTokenExpireIn = buildBodyParams();
            return expireAppTokensAsync(appId, applicationTokenExpireIn, idempotencyKey, _callback);
        }
    }

    /**
     * Expire All
     * Expire all of the tokens associated with a specific Application
     * @param appId The app&#39;s ID or UID (required)
     * @param applicationTokenExpireIn  (required)
     * @return ExpireAppTokensRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
     </table>
     */
    public ExpireAppTokensRequestBuilder expireAppTokens(String appId) throws IllegalArgumentException {
        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            if (appId != null && appId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for appId. Length must be greater than or equal to 1.");
            }

        return new ExpireAppTokensRequestBuilder(appId);
    }
    private okhttp3.Call generateMagicLinkCall(String appId, String idempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/auth/dashboard-access/{app_id}"
            .replace("{" + "app_id" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (idempotencyKey != null) {
            localVarHeaderParams.put("idempotency-key", localVarApiClient.parameterToString(idempotencyKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateMagicLinkValidateBeforeCall(String appId, String idempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling generateMagicLink(Async)");
        }

        return generateMagicLinkCall(appId, idempotencyKey, _callback);

    }


    private ApiResponse<DashboardAccessOut> generateMagicLinkWithHttpInfo(String appId, String idempotencyKey) throws ApiException {
        okhttp3.Call localVarCall = generateMagicLinkValidateBeforeCall(appId, idempotencyKey, null);
        Type localVarReturnType = new TypeToken<DashboardAccessOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call generateMagicLinkAsync(String appId, String idempotencyKey, final ApiCallback<DashboardAccessOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateMagicLinkValidateBeforeCall(appId, idempotencyKey, _callback);
        Type localVarReturnType = new TypeToken<DashboardAccessOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GenerateMagicLinkRequestBuilder {
        private final String appId;
        private String idempotencyKey;

        private GenerateMagicLinkRequestBuilder(String appId) {
            this.appId = appId;
        }

        /**
         * Set idempotencyKey
         * @param idempotencyKey The request&#39;s idempotency key (optional)
         * @return GenerateMagicLinkRequestBuilder
         */
        public GenerateMagicLinkRequestBuilder idempotencyKey(String idempotencyKey) {
            this.idempotencyKey = idempotencyKey;
            return this;
        }
        
        /**
         * Build call for generateMagicLink
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return generateMagicLinkCall(appId, idempotencyKey, _callback);
        }


        /**
         * Execute generateMagicLink request
         * @return DashboardAccessOut
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public DashboardAccessOut execute() throws ApiException {
            ApiResponse<DashboardAccessOut> localVarResp = generateMagicLinkWithHttpInfo(appId, idempotencyKey);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute generateMagicLink request with HTTP info returned
         * @return ApiResponse&lt;DashboardAccessOut&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ApiResponse<DashboardAccessOut> executeWithHttpInfo() throws ApiException {
            return generateMagicLinkWithHttpInfo(appId, idempotencyKey);
        }

        /**
         * Execute generateMagicLink request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call executeAsync(final ApiCallback<DashboardAccessOut> _callback) throws ApiException {
            return generateMagicLinkAsync(appId, idempotencyKey, _callback);
        }
    }

    /**
     * Dashboard Access
     * DEPRECATED: Please use &#x60;app-portal-access&#x60; instead.  Use this function to get magic links (and authentication codes) for connecting your users to the Consumer Application Portal.
     * @param appId The app&#39;s ID or UID (required)
     * @return GenerateMagicLinkRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public GenerateMagicLinkRequestBuilder generateMagicLink(String appId) throws IllegalArgumentException {
        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            if (appId != null && appId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for appId. Length must be greater than or equal to 1.");
            }

        return new GenerateMagicLinkRequestBuilder(appId);
    }
    private okhttp3.Call obtainMagicLinkAndCodeCall(String appId, AppPortalAccessIn appPortalAccessIn, String idempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = appPortalAccessIn;

        // create path and map variables
        String localVarPath = "/api/v1/auth/app-portal-access/{app_id}"
            .replace("{" + "app_id" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (idempotencyKey != null) {
            localVarHeaderParams.put("idempotency-key", localVarApiClient.parameterToString(idempotencyKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call obtainMagicLinkAndCodeValidateBeforeCall(String appId, AppPortalAccessIn appPortalAccessIn, String idempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling obtainMagicLinkAndCode(Async)");
        }

        // verify the required parameter 'appPortalAccessIn' is set
        if (appPortalAccessIn == null) {
            throw new ApiException("Missing the required parameter 'appPortalAccessIn' when calling obtainMagicLinkAndCode(Async)");
        }

        return obtainMagicLinkAndCodeCall(appId, appPortalAccessIn, idempotencyKey, _callback);

    }


    private ApiResponse<AppPortalAccessOut> obtainMagicLinkAndCodeWithHttpInfo(String appId, AppPortalAccessIn appPortalAccessIn, String idempotencyKey) throws ApiException {
        okhttp3.Call localVarCall = obtainMagicLinkAndCodeValidateBeforeCall(appId, appPortalAccessIn, idempotencyKey, null);
        Type localVarReturnType = new TypeToken<AppPortalAccessOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call obtainMagicLinkAndCodeAsync(String appId, AppPortalAccessIn appPortalAccessIn, String idempotencyKey, final ApiCallback<AppPortalAccessOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = obtainMagicLinkAndCodeValidateBeforeCall(appId, appPortalAccessIn, idempotencyKey, _callback);
        Type localVarReturnType = new TypeToken<AppPortalAccessOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ObtainMagicLinkAndCodeRequestBuilder {
        private final String appId;
        private Set<String> featureFlags;
        private Integer expiry;
        private String idempotencyKey;

        private ObtainMagicLinkAndCodeRequestBuilder(String appId) {
            this.appId = appId;
        }

        /**
         * Set featureFlags
         * @param featureFlags The set of feature flags the created token will have access to. (optional)
         * @return ObtainMagicLinkAndCodeRequestBuilder
         */
        public ObtainMagicLinkAndCodeRequestBuilder featureFlags(Set<String> featureFlags) {
            this.featureFlags = featureFlags;
            return this;
        }
        
        /**
         * Set expiry
         * @param expiry How long the token will be valid for, in seconds. Valid values are between 1 hour and 7 days. The default is 7 days. (optional, default to 604800)
         * @return ObtainMagicLinkAndCodeRequestBuilder
         */
        public ObtainMagicLinkAndCodeRequestBuilder expiry(Integer expiry) {
            this.expiry = expiry;
            return this;
        }
        
        /**
         * Set idempotencyKey
         * @param idempotencyKey The request&#39;s idempotency key (optional)
         * @return ObtainMagicLinkAndCodeRequestBuilder
         */
        public ObtainMagicLinkAndCodeRequestBuilder idempotencyKey(String idempotencyKey) {
            this.idempotencyKey = idempotencyKey;
            return this;
        }
        
        /**
         * Build call for obtainMagicLinkAndCode
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AppPortalAccessIn appPortalAccessIn = buildBodyParams();
            return obtainMagicLinkAndCodeCall(appId, appPortalAccessIn, idempotencyKey, _callback);
        }

        private AppPortalAccessIn buildBodyParams() {
            AppPortalAccessIn appPortalAccessIn = new AppPortalAccessIn();
            appPortalAccessIn.featureFlags(this.featureFlags);
            appPortalAccessIn.expiry(this.expiry);
            return appPortalAccessIn;
        }

        /**
         * Execute obtainMagicLinkAndCode request
         * @return AppPortalAccessOut
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public AppPortalAccessOut execute() throws ApiException {
            AppPortalAccessIn appPortalAccessIn = buildBodyParams();
            ApiResponse<AppPortalAccessOut> localVarResp = obtainMagicLinkAndCodeWithHttpInfo(appId, appPortalAccessIn, idempotencyKey);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute obtainMagicLinkAndCode request with HTTP info returned
         * @return ApiResponse&lt;AppPortalAccessOut&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AppPortalAccessOut> executeWithHttpInfo() throws ApiException {
            AppPortalAccessIn appPortalAccessIn = buildBodyParams();
            return obtainMagicLinkAndCodeWithHttpInfo(appId, appPortalAccessIn, idempotencyKey);
        }

        /**
         * Execute obtainMagicLinkAndCode request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AppPortalAccessOut> _callback) throws ApiException {
            AppPortalAccessIn appPortalAccessIn = buildBodyParams();
            return obtainMagicLinkAndCodeAsync(appId, appPortalAccessIn, idempotencyKey, _callback);
        }
    }

    /**
     * Get Consumer App Portal Access
     * Use this function to get magic links (and authentication codes) for connecting your users to the Consumer Application Portal.
     * @param appId The app&#39;s ID or UID (required)
     * @param appPortalAccessIn  (required)
     * @return ObtainMagicLinkAndCodeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ObtainMagicLinkAndCodeRequestBuilder obtainMagicLinkAndCode(String appId) throws IllegalArgumentException {
        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            if (appId != null && appId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for appId. Length must be greater than or equal to 1.");
            }

        return new ObtainMagicLinkAndCodeRequestBuilder(appId);
    }
    private okhttp3.Call revokeTokenCall(String idempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/auth/logout";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (idempotencyKey != null) {
            localVarHeaderParams.put("idempotency-key", localVarApiClient.parameterToString(idempotencyKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call revokeTokenValidateBeforeCall(String idempotencyKey, final ApiCallback _callback) throws ApiException {
        return revokeTokenCall(idempotencyKey, _callback);

    }


    private ApiResponse<Void> revokeTokenWithHttpInfo(String idempotencyKey) throws ApiException {
        okhttp3.Call localVarCall = revokeTokenValidateBeforeCall(idempotencyKey, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call revokeTokenAsync(String idempotencyKey, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = revokeTokenValidateBeforeCall(idempotencyKey, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RevokeTokenRequestBuilder {
        private String idempotencyKey;

        private RevokeTokenRequestBuilder() {
        }

        /**
         * Set idempotencyKey
         * @param idempotencyKey The request&#39;s idempotency key (optional)
         * @return RevokeTokenRequestBuilder
         */
        public RevokeTokenRequestBuilder idempotencyKey(String idempotencyKey) {
            this.idempotencyKey = idempotencyKey;
            return this;
        }
        
        /**
         * Build call for revokeToken
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return revokeTokenCall(idempotencyKey, _callback);
        }


        /**
         * Execute revokeToken request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            revokeTokenWithHttpInfo(idempotencyKey);
        }

        /**
         * Execute revokeToken request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return revokeTokenWithHttpInfo(idempotencyKey);
        }

        /**
         * Execute revokeToken request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return revokeTokenAsync(idempotencyKey, _callback);
        }
    }

    /**
     * Logout
     * Logout an app token.  Trying to log out other tokens will fail.
     * @return RevokeTokenRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
     </table>
     */
    public RevokeTokenRequestBuilder revokeToken() throws IllegalArgumentException {
        return new RevokeTokenRequestBuilder();
    }
}
