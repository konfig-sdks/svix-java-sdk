/*
 * Svix API
 * Welcome to the Svix API documentation!  Useful links: [Homepage](https://www.svix.com) | [Support email](mailto:support+docs@svix.com) | [Blog](https://www.svix.com/blog/) | [Slack Community](https://www.svix.com/slack/)  # Introduction  This is the reference documentation and schemas for the [Svix webhook service](https://www.svix.com) API. For tutorials and other documentation please refer to [the documentation](https://docs.svix.com).  ## Main concepts  In Svix you have four important entities you will be interacting with:  - `messages`: these are the webhooks being sent. They can have contents and a few other properties. - `application`: this is where `messages` are sent to. Usually you want to create one application for each user on your platform. - `endpoint`: endpoints are the URLs messages will be sent to. Each application can have multiple `endpoints` and each message sent to that application will be sent to all of them (unless they are not subscribed to the sent event type). - `event-type`: event types are identifiers denoting the type of the message being sent. Event types are primarily used to decide which events are sent to which endpoint.   ## Authentication  Get your authentication token (`AUTH_TOKEN`) from the [Svix dashboard](https://dashboard.svix.com) and use it as part of the `Authorization` header as such: `Authorization: Bearer ${AUTH_TOKEN}`. For more information on authentication, please refer to the [authentication token docs](https://docs.svix.com/api-keys).     ## Code samples  The code samples assume you already have the respective libraries installed and you know how to use them. For the latest information on how to do that, please refer to [the documentation](https://docs.svix.com/).   ## Idempotency  Svix supports [idempotency](https://en.wikipedia.org/wiki/Idempotence) for safely retrying requests without accidentally performing the same operation twice. This is useful when an API call is disrupted in transit and you do not receive a response.  To perform an idempotent request, pass the idempotency key in the `Idempotency-Key` header to the request. The idempotency key should be a unique value generated by the client. You can create the key in however way you like, though we suggest using UUID v4, or any other string with enough entropy to avoid collisions.  Svix's idempotency works by saving the resulting status code and body of the first request made for any given idempotency key for any successful request. Subsequent requests with the same key return the same result for a period of up to 12 hours.  Please note that idempotency is only supported for `POST` requests.   ## Cross-Origin Resource Sharing  This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/). And that allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site. 
 *
 * The version of the OpenAPI document: 1.20.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.EventTypeImportOpenApiIn;
import com.konfigthis.client.model.EventTypeImportOpenApiOut;
import com.konfigthis.client.model.EventTypeIn;
import com.konfigthis.client.model.EventTypeOut;
import com.konfigthis.client.model.EventTypePatch;
import com.konfigthis.client.model.EventTypeUpdate;
import com.konfigthis.client.model.ListResponseEventTypeOut;
import com.konfigthis.client.model.Ordering;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class EventTypeApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EventTypeApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public EventTypeApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call archiveTypeCall(String eventTypeName, Boolean expunge, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/event-type/{event_type_name}"
            .replace("{" + "event_type_name" + "}", localVarApiClient.escapeString(eventTypeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expunge != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expunge", expunge));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call archiveTypeValidateBeforeCall(String eventTypeName, Boolean expunge, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'eventTypeName' is set
        if (eventTypeName == null) {
            throw new ApiException("Missing the required parameter 'eventTypeName' when calling archiveType(Async)");
        }

        return archiveTypeCall(eventTypeName, expunge, _callback);

    }


    private ApiResponse<Void> archiveTypeWithHttpInfo(String eventTypeName, Boolean expunge) throws ApiException {
        okhttp3.Call localVarCall = archiveTypeValidateBeforeCall(eventTypeName, expunge, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call archiveTypeAsync(String eventTypeName, Boolean expunge, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = archiveTypeValidateBeforeCall(eventTypeName, expunge, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class ArchiveTypeRequestBuilder {
        private final String eventTypeName;
        private Boolean expunge;

        private ArchiveTypeRequestBuilder(String eventTypeName) {
            this.eventTypeName = eventTypeName;
        }

        /**
         * Set expunge
         * @param expunge By default event types are archived when \&quot;deleted\&quot;. Passing this to &#x60;true&#x60; deletes them entirely. (optional, default to false)
         * @return ArchiveTypeRequestBuilder
         */
        public ArchiveTypeRequestBuilder expunge(Boolean expunge) {
            this.expunge = expunge;
            return this;
        }
        
        /**
         * Build call for archiveType
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return archiveTypeCall(eventTypeName, expunge, _callback);
        }


        /**
         * Execute archiveType request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            archiveTypeWithHttpInfo(eventTypeName, expunge);
        }

        /**
         * Execute archiveType request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return archiveTypeWithHttpInfo(eventTypeName, expunge);
        }

        /**
         * Execute archiveType request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return archiveTypeAsync(eventTypeName, expunge, _callback);
        }
    }

    /**
     * Delete Event Type
     * Archive an event type.  Endpoints already configured to filter on an event type will continue to do so after archival. However, new messages can not be sent with it and endpoints can not filter on it. An event type can be unarchived with the [create operation](#operation/create_event_type_api_v1_event_type__post).
     * @param eventTypeName The event type&#39;s name (required)
     * @return ArchiveTypeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
     </table>
     */
    public ArchiveTypeRequestBuilder archiveType(String eventTypeName) throws IllegalArgumentException {
        if (eventTypeName == null) throw new IllegalArgumentException("\"eventTypeName\" is required but got null");
            

        return new ArchiveTypeRequestBuilder(eventTypeName);
    }
    private okhttp3.Call createOrUpdateCall(EventTypeIn eventTypeIn, String idempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = eventTypeIn;

        // create path and map variables
        String localVarPath = "/api/v1/event-type";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (idempotencyKey != null) {
            localVarHeaderParams.put("idempotency-key", localVarApiClient.parameterToString(idempotencyKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOrUpdateValidateBeforeCall(EventTypeIn eventTypeIn, String idempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'eventTypeIn' is set
        if (eventTypeIn == null) {
            throw new ApiException("Missing the required parameter 'eventTypeIn' when calling createOrUpdate(Async)");
        }

        return createOrUpdateCall(eventTypeIn, idempotencyKey, _callback);

    }


    private ApiResponse<EventTypeOut> createOrUpdateWithHttpInfo(EventTypeIn eventTypeIn, String idempotencyKey) throws ApiException {
        okhttp3.Call localVarCall = createOrUpdateValidateBeforeCall(eventTypeIn, idempotencyKey, null);
        Type localVarReturnType = new TypeToken<EventTypeOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createOrUpdateAsync(EventTypeIn eventTypeIn, String idempotencyKey, final ApiCallback<EventTypeOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOrUpdateValidateBeforeCall(eventTypeIn, idempotencyKey, _callback);
        Type localVarReturnType = new TypeToken<EventTypeOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateOrUpdateRequestBuilder {
        private final String description;
        private final String name;
        private Boolean archived;
        private Map<String, Object> schemas;
        private String featureFlag;
        private String idempotencyKey;

        private CreateOrUpdateRequestBuilder(String description, String name) {
            this.description = description;
            this.name = name;
        }

        /**
         * Set archived
         * @param archived  (optional, default to false)
         * @return CreateOrUpdateRequestBuilder
         */
        public CreateOrUpdateRequestBuilder archived(Boolean archived) {
            this.archived = archived;
            return this;
        }
        
        /**
         * Set schemas
         * @param schemas The schema for the event type for a specific version as a JSON schema. (optional)
         * @return CreateOrUpdateRequestBuilder
         */
        public CreateOrUpdateRequestBuilder schemas(Map<String, Object> schemas) {
            this.schemas = schemas;
            return this;
        }
        
        /**
         * Set featureFlag
         * @param featureFlag  (optional)
         * @return CreateOrUpdateRequestBuilder
         */
        public CreateOrUpdateRequestBuilder featureFlag(String featureFlag) {
            this.featureFlag = featureFlag;
            return this;
        }
        
        /**
         * Set idempotencyKey
         * @param idempotencyKey The request&#39;s idempotency key (optional)
         * @return CreateOrUpdateRequestBuilder
         */
        public CreateOrUpdateRequestBuilder idempotencyKey(String idempotencyKey) {
            this.idempotencyKey = idempotencyKey;
            return this;
        }
        
        /**
         * Build call for createOrUpdate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EventTypeIn eventTypeIn = buildBodyParams();
            return createOrUpdateCall(eventTypeIn, idempotencyKey, _callback);
        }

        private EventTypeIn buildBodyParams() {
            EventTypeIn eventTypeIn = new EventTypeIn();
            eventTypeIn.description(this.description);
            eventTypeIn.name(this.name);
            eventTypeIn.archived(this.archived);
            eventTypeIn.schemas(this.schemas);
            eventTypeIn.featureFlag(this.featureFlag);
            return eventTypeIn;
        }

        /**
         * Execute createOrUpdate request
         * @return EventTypeOut
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public EventTypeOut execute() throws ApiException {
            EventTypeIn eventTypeIn = buildBodyParams();
            ApiResponse<EventTypeOut> localVarResp = createOrUpdateWithHttpInfo(eventTypeIn, idempotencyKey);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createOrUpdate request with HTTP info returned
         * @return ApiResponse&lt;EventTypeOut&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EventTypeOut> executeWithHttpInfo() throws ApiException {
            EventTypeIn eventTypeIn = buildBodyParams();
            return createOrUpdateWithHttpInfo(eventTypeIn, idempotencyKey);
        }

        /**
         * Execute createOrUpdate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EventTypeOut> _callback) throws ApiException {
            EventTypeIn eventTypeIn = buildBodyParams();
            return createOrUpdateAsync(eventTypeIn, idempotencyKey, _callback);
        }
    }

    /**
     * Create Event Type
     * Create new or unarchive existing event type.  Unarchiving an event type will allow endpoints to filter on it and messages to be sent with it. Endpoints filtering on the event type before archival will continue to filter on it. This operation does not preserve the description and schemas.
     * @param eventTypeIn  (required)
     * @return CreateOrUpdateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CreateOrUpdateRequestBuilder createOrUpdate(String description, String name) throws IllegalArgumentException {
        if (description == null) throw new IllegalArgumentException("\"description\" is required but got null");
            

        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        return new CreateOrUpdateRequestBuilder(description, name);
    }
    private okhttp3.Call getByNameCall(String eventTypeName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/event-type/{event_type_name}"
            .replace("{" + "event_type_name" + "}", localVarApiClient.escapeString(eventTypeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByNameValidateBeforeCall(String eventTypeName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'eventTypeName' is set
        if (eventTypeName == null) {
            throw new ApiException("Missing the required parameter 'eventTypeName' when calling getByName(Async)");
        }

        return getByNameCall(eventTypeName, _callback);

    }


    private ApiResponse<EventTypeOut> getByNameWithHttpInfo(String eventTypeName) throws ApiException {
        okhttp3.Call localVarCall = getByNameValidateBeforeCall(eventTypeName, null);
        Type localVarReturnType = new TypeToken<EventTypeOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByNameAsync(String eventTypeName, final ApiCallback<EventTypeOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByNameValidateBeforeCall(eventTypeName, _callback);
        Type localVarReturnType = new TypeToken<EventTypeOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByNameRequestBuilder {
        private final String eventTypeName;

        private GetByNameRequestBuilder(String eventTypeName) {
            this.eventTypeName = eventTypeName;
        }

        /**
         * Build call for getByName
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByNameCall(eventTypeName, _callback);
        }


        /**
         * Execute getByName request
         * @return EventTypeOut
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public EventTypeOut execute() throws ApiException {
            ApiResponse<EventTypeOut> localVarResp = getByNameWithHttpInfo(eventTypeName);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getByName request with HTTP info returned
         * @return ApiResponse&lt;EventTypeOut&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EventTypeOut> executeWithHttpInfo() throws ApiException {
            return getByNameWithHttpInfo(eventTypeName);
        }

        /**
         * Execute getByName request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EventTypeOut> _callback) throws ApiException {
            return getByNameAsync(eventTypeName, _callback);
        }
    }

    /**
     * Get Event Type
     * Get an event type.
     * @param eventTypeName The event type&#39;s name (required)
     * @return GetByNameRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetByNameRequestBuilder getByName(String eventTypeName) throws IllegalArgumentException {
        if (eventTypeName == null) throw new IllegalArgumentException("\"eventTypeName\" is required but got null");
            

        return new GetByNameRequestBuilder(eventTypeName);
    }
    private okhttp3.Call getListCall(Integer limit, String iterator, Ordering order, Boolean includeArchived, Boolean withContent, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/event-type";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (iterator != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("iterator", iterator));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (includeArchived != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_archived", includeArchived));
        }

        if (withContent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("with_content", withContent));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getListValidateBeforeCall(Integer limit, String iterator, Ordering order, Boolean includeArchived, Boolean withContent, final ApiCallback _callback) throws ApiException {
        return getListCall(limit, iterator, order, includeArchived, withContent, _callback);

    }


    private ApiResponse<ListResponseEventTypeOut> getListWithHttpInfo(Integer limit, String iterator, Ordering order, Boolean includeArchived, Boolean withContent) throws ApiException {
        okhttp3.Call localVarCall = getListValidateBeforeCall(limit, iterator, order, includeArchived, withContent, null);
        Type localVarReturnType = new TypeToken<ListResponseEventTypeOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getListAsync(Integer limit, String iterator, Ordering order, Boolean includeArchived, Boolean withContent, final ApiCallback<ListResponseEventTypeOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = getListValidateBeforeCall(limit, iterator, order, includeArchived, withContent, _callback);
        Type localVarReturnType = new TypeToken<ListResponseEventTypeOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetListRequestBuilder {
        private Integer limit;
        private String iterator;
        private Ordering order;
        private Boolean includeArchived;
        private Boolean withContent;

        private GetListRequestBuilder() {
        }

        /**
         * Set limit
         * @param limit Limit the number of returned items (optional)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set iterator
         * @param iterator The iterator returned from a prior invocation (optional)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder iterator(String iterator) {
            this.iterator = iterator;
            return this;
        }
        
        /**
         * Set order
         * @param order The sorting order of the returned items (optional)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder order(Ordering order) {
            this.order = order;
            return this;
        }
        
        /**
         * Set includeArchived
         * @param includeArchived When &#x60;true&#x60; archived (deleted but not expunged) items are included in the response (optional, default to false)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder includeArchived(Boolean includeArchived) {
            this.includeArchived = includeArchived;
            return this;
        }
        
        /**
         * Set withContent
         * @param withContent When &#x60;true&#x60; the full item (including the schema) is included in the response (optional, default to false)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder withContent(Boolean withContent) {
            this.withContent = withContent;
            return this;
        }
        
        /**
         * Build call for getList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getListCall(limit, iterator, order, includeArchived, withContent, _callback);
        }


        /**
         * Execute getList request
         * @return ListResponseEventTypeOut
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ListResponseEventTypeOut execute() throws ApiException {
            ApiResponse<ListResponseEventTypeOut> localVarResp = getListWithHttpInfo(limit, iterator, order, includeArchived, withContent);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getList request with HTTP info returned
         * @return ApiResponse&lt;ListResponseEventTypeOut&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListResponseEventTypeOut> executeWithHttpInfo() throws ApiException {
            return getListWithHttpInfo(limit, iterator, order, includeArchived, withContent);
        }

        /**
         * Execute getList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListResponseEventTypeOut> _callback) throws ApiException {
            return getListAsync(limit, iterator, order, includeArchived, withContent, _callback);
        }
    }

    /**
     * List Event Types
     * Return the list of event types.
     * @return GetListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetListRequestBuilder getList() throws IllegalArgumentException {
        return new GetListRequestBuilder();
    }
    private okhttp3.Call importFromOpenapiCall(EventTypeImportOpenApiIn eventTypeImportOpenApiIn, String idempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = eventTypeImportOpenApiIn;

        // create path and map variables
        String localVarPath = "/api/v1/event-type/import/openapi";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (idempotencyKey != null) {
            localVarHeaderParams.put("idempotency-key", localVarApiClient.parameterToString(idempotencyKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call importFromOpenapiValidateBeforeCall(EventTypeImportOpenApiIn eventTypeImportOpenApiIn, String idempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'eventTypeImportOpenApiIn' is set
        if (eventTypeImportOpenApiIn == null) {
            throw new ApiException("Missing the required parameter 'eventTypeImportOpenApiIn' when calling importFromOpenapi(Async)");
        }

        return importFromOpenapiCall(eventTypeImportOpenApiIn, idempotencyKey, _callback);

    }


    private ApiResponse<EventTypeImportOpenApiOut> importFromOpenapiWithHttpInfo(EventTypeImportOpenApiIn eventTypeImportOpenApiIn, String idempotencyKey) throws ApiException {
        okhttp3.Call localVarCall = importFromOpenapiValidateBeforeCall(eventTypeImportOpenApiIn, idempotencyKey, null);
        Type localVarReturnType = new TypeToken<EventTypeImportOpenApiOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call importFromOpenapiAsync(EventTypeImportOpenApiIn eventTypeImportOpenApiIn, String idempotencyKey, final ApiCallback<EventTypeImportOpenApiOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = importFromOpenapiValidateBeforeCall(eventTypeImportOpenApiIn, idempotencyKey, _callback);
        Type localVarReturnType = new TypeToken<EventTypeImportOpenApiOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ImportFromOpenapiRequestBuilder {
        private Map<String, Object> spec;
        private String specRaw;
        private String idempotencyKey;

        private ImportFromOpenapiRequestBuilder() {
        }

        /**
         * Set spec
         * @param spec A pre-parsed JSON spec. (optional)
         * @return ImportFromOpenapiRequestBuilder
         */
        public ImportFromOpenapiRequestBuilder spec(Map<String, Object> spec) {
            this.spec = spec;
            return this;
        }
        
        /**
         * Set specRaw
         * @param specRaw A string, parsed by the server as YAML or JSON. (optional)
         * @return ImportFromOpenapiRequestBuilder
         */
        public ImportFromOpenapiRequestBuilder specRaw(String specRaw) {
            this.specRaw = specRaw;
            return this;
        }
        
        /**
         * Set idempotencyKey
         * @param idempotencyKey The request&#39;s idempotency key (optional)
         * @return ImportFromOpenapiRequestBuilder
         */
        public ImportFromOpenapiRequestBuilder idempotencyKey(String idempotencyKey) {
            this.idempotencyKey = idempotencyKey;
            return this;
        }
        
        /**
         * Build call for importFromOpenapi
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EventTypeImportOpenApiIn eventTypeImportOpenApiIn = buildBodyParams();
            return importFromOpenapiCall(eventTypeImportOpenApiIn, idempotencyKey, _callback);
        }

        private EventTypeImportOpenApiIn buildBodyParams() {
            EventTypeImportOpenApiIn eventTypeImportOpenApiIn = new EventTypeImportOpenApiIn();
            eventTypeImportOpenApiIn.spec(this.spec);
            eventTypeImportOpenApiIn.specRaw(this.specRaw);
            return eventTypeImportOpenApiIn;
        }

        /**
         * Execute importFromOpenapi request
         * @return EventTypeImportOpenApiOut
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public EventTypeImportOpenApiOut execute() throws ApiException {
            EventTypeImportOpenApiIn eventTypeImportOpenApiIn = buildBodyParams();
            ApiResponse<EventTypeImportOpenApiOut> localVarResp = importFromOpenapiWithHttpInfo(eventTypeImportOpenApiIn, idempotencyKey);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute importFromOpenapi request with HTTP info returned
         * @return ApiResponse&lt;EventTypeImportOpenApiOut&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EventTypeImportOpenApiOut> executeWithHttpInfo() throws ApiException {
            EventTypeImportOpenApiIn eventTypeImportOpenApiIn = buildBodyParams();
            return importFromOpenapiWithHttpInfo(eventTypeImportOpenApiIn, idempotencyKey);
        }

        /**
         * Execute importFromOpenapi request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EventTypeImportOpenApiOut> _callback) throws ApiException {
            EventTypeImportOpenApiIn eventTypeImportOpenApiIn = buildBodyParams();
            return importFromOpenapiAsync(eventTypeImportOpenApiIn, idempotencyKey, _callback);
        }
    }

    /**
     * Event Type Import From Openapi
     * Given an OpenAPI spec, create new or update existing event types. If an existing &#x60;archived&#x60; event type is updated, it will be unarchvied.  The importer will convert all webhooks found in the either the &#x60;webhooks&#x60; or &#x60;x-webhooks&#x60; top-level.
     * @param eventTypeImportOpenApiIn Import a list of event types from webhooks defined in an OpenAPI spec.  The OpenAPI spec can be specified as either &#x60;spec&#x60; given the spec as a JSON object, or as &#x60;specRaw&#x60; (a &#x60;string&#x60;) which will be parsed as YAML or JSON by the server. Sending neither or both is invalid, resulting in a &#x60;400&#x60; **Bad Request**. (required)
     * @return ImportFromOpenapiRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ImportFromOpenapiRequestBuilder importFromOpenapi() throws IllegalArgumentException {
        return new ImportFromOpenapiRequestBuilder();
    }
    private okhttp3.Call partiallyUpdateTypeCall(String eventTypeName, EventTypePatch eventTypePatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = eventTypePatch;

        // create path and map variables
        String localVarPath = "/api/v1/event-type/{event_type_name}"
            .replace("{" + "event_type_name" + "}", localVarApiClient.escapeString(eventTypeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call partiallyUpdateTypeValidateBeforeCall(String eventTypeName, EventTypePatch eventTypePatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'eventTypeName' is set
        if (eventTypeName == null) {
            throw new ApiException("Missing the required parameter 'eventTypeName' when calling partiallyUpdateType(Async)");
        }

        // verify the required parameter 'eventTypePatch' is set
        if (eventTypePatch == null) {
            throw new ApiException("Missing the required parameter 'eventTypePatch' when calling partiallyUpdateType(Async)");
        }

        return partiallyUpdateTypeCall(eventTypeName, eventTypePatch, _callback);

    }


    private ApiResponse<EventTypeOut> partiallyUpdateTypeWithHttpInfo(String eventTypeName, EventTypePatch eventTypePatch) throws ApiException {
        okhttp3.Call localVarCall = partiallyUpdateTypeValidateBeforeCall(eventTypeName, eventTypePatch, null);
        Type localVarReturnType = new TypeToken<EventTypeOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call partiallyUpdateTypeAsync(String eventTypeName, EventTypePatch eventTypePatch, final ApiCallback<EventTypeOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = partiallyUpdateTypeValidateBeforeCall(eventTypeName, eventTypePatch, _callback);
        Type localVarReturnType = new TypeToken<EventTypeOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class PartiallyUpdateTypeRequestBuilder {
        private final String eventTypeName;
        private String description;
        private Boolean archived;
        private Map<String, Object> schemas;
        private String featureFlag;

        private PartiallyUpdateTypeRequestBuilder(String eventTypeName) {
            this.eventTypeName = eventTypeName;
        }

        /**
         * Set description
         * @param description  (optional)
         * @return PartiallyUpdateTypeRequestBuilder
         */
        public PartiallyUpdateTypeRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set archived
         * @param archived  (optional)
         * @return PartiallyUpdateTypeRequestBuilder
         */
        public PartiallyUpdateTypeRequestBuilder archived(Boolean archived) {
            this.archived = archived;
            return this;
        }
        
        /**
         * Set schemas
         * @param schemas  (optional)
         * @return PartiallyUpdateTypeRequestBuilder
         */
        public PartiallyUpdateTypeRequestBuilder schemas(Map<String, Object> schemas) {
            this.schemas = schemas;
            return this;
        }
        
        /**
         * Set featureFlag
         * @param featureFlag  (optional)
         * @return PartiallyUpdateTypeRequestBuilder
         */
        public PartiallyUpdateTypeRequestBuilder featureFlag(String featureFlag) {
            this.featureFlag = featureFlag;
            return this;
        }
        
        /**
         * Build call for partiallyUpdateType
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EventTypePatch eventTypePatch = buildBodyParams();
            return partiallyUpdateTypeCall(eventTypeName, eventTypePatch, _callback);
        }

        private EventTypePatch buildBodyParams() {
            EventTypePatch eventTypePatch = new EventTypePatch();
            eventTypePatch.description(this.description);
            eventTypePatch.archived(this.archived);
            eventTypePatch.schemas(this.schemas);
            eventTypePatch.featureFlag(this.featureFlag);
            return eventTypePatch;
        }

        /**
         * Execute partiallyUpdateType request
         * @return EventTypeOut
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public EventTypeOut execute() throws ApiException {
            EventTypePatch eventTypePatch = buildBodyParams();
            ApiResponse<EventTypeOut> localVarResp = partiallyUpdateTypeWithHttpInfo(eventTypeName, eventTypePatch);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute partiallyUpdateType request with HTTP info returned
         * @return ApiResponse&lt;EventTypeOut&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EventTypeOut> executeWithHttpInfo() throws ApiException {
            EventTypePatch eventTypePatch = buildBodyParams();
            return partiallyUpdateTypeWithHttpInfo(eventTypeName, eventTypePatch);
        }

        /**
         * Execute partiallyUpdateType request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EventTypeOut> _callback) throws ApiException {
            EventTypePatch eventTypePatch = buildBodyParams();
            return partiallyUpdateTypeAsync(eventTypeName, eventTypePatch, _callback);
        }
    }

    /**
     * Patch Event Type
     * Partially update an event type.
     * @param eventTypeName The event type&#39;s name (required)
     * @param eventTypePatch  (required)
     * @return PartiallyUpdateTypeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PartiallyUpdateTypeRequestBuilder partiallyUpdateType(String eventTypeName) throws IllegalArgumentException {
        if (eventTypeName == null) throw new IllegalArgumentException("\"eventTypeName\" is required but got null");
            

        return new PartiallyUpdateTypeRequestBuilder(eventTypeName);
    }
    private okhttp3.Call updateTypeCall(String eventTypeName, EventTypeUpdate eventTypeUpdate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = eventTypeUpdate;

        // create path and map variables
        String localVarPath = "/api/v1/event-type/{event_type_name}"
            .replace("{" + "event_type_name" + "}", localVarApiClient.escapeString(eventTypeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTypeValidateBeforeCall(String eventTypeName, EventTypeUpdate eventTypeUpdate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'eventTypeName' is set
        if (eventTypeName == null) {
            throw new ApiException("Missing the required parameter 'eventTypeName' when calling updateType(Async)");
        }

        // verify the required parameter 'eventTypeUpdate' is set
        if (eventTypeUpdate == null) {
            throw new ApiException("Missing the required parameter 'eventTypeUpdate' when calling updateType(Async)");
        }

        return updateTypeCall(eventTypeName, eventTypeUpdate, _callback);

    }


    private ApiResponse<EventTypeOut> updateTypeWithHttpInfo(String eventTypeName, EventTypeUpdate eventTypeUpdate) throws ApiException {
        okhttp3.Call localVarCall = updateTypeValidateBeforeCall(eventTypeName, eventTypeUpdate, null);
        Type localVarReturnType = new TypeToken<EventTypeOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateTypeAsync(String eventTypeName, EventTypeUpdate eventTypeUpdate, final ApiCallback<EventTypeOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTypeValidateBeforeCall(eventTypeName, eventTypeUpdate, _callback);
        Type localVarReturnType = new TypeToken<EventTypeOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateTypeRequestBuilder {
        private final String description;
        private final String eventTypeName;
        private Boolean archived;
        private Map<String, Object> schemas;
        private String featureFlag;

        private UpdateTypeRequestBuilder(String description, String eventTypeName) {
            this.description = description;
            this.eventTypeName = eventTypeName;
        }

        /**
         * Set archived
         * @param archived  (optional, default to false)
         * @return UpdateTypeRequestBuilder
         */
        public UpdateTypeRequestBuilder archived(Boolean archived) {
            this.archived = archived;
            return this;
        }
        
        /**
         * Set schemas
         * @param schemas The schema for the event type for a specific version as a JSON schema. (optional)
         * @return UpdateTypeRequestBuilder
         */
        public UpdateTypeRequestBuilder schemas(Map<String, Object> schemas) {
            this.schemas = schemas;
            return this;
        }
        
        /**
         * Set featureFlag
         * @param featureFlag  (optional)
         * @return UpdateTypeRequestBuilder
         */
        public UpdateTypeRequestBuilder featureFlag(String featureFlag) {
            this.featureFlag = featureFlag;
            return this;
        }
        
        /**
         * Build call for updateType
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EventTypeUpdate eventTypeUpdate = buildBodyParams();
            return updateTypeCall(eventTypeName, eventTypeUpdate, _callback);
        }

        private EventTypeUpdate buildBodyParams() {
            EventTypeUpdate eventTypeUpdate = new EventTypeUpdate();
            eventTypeUpdate.description(this.description);
            eventTypeUpdate.archived(this.archived);
            eventTypeUpdate.schemas(this.schemas);
            eventTypeUpdate.featureFlag(this.featureFlag);
            return eventTypeUpdate;
        }

        /**
         * Execute updateType request
         * @return EventTypeOut
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public EventTypeOut execute() throws ApiException {
            EventTypeUpdate eventTypeUpdate = buildBodyParams();
            ApiResponse<EventTypeOut> localVarResp = updateTypeWithHttpInfo(eventTypeName, eventTypeUpdate);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateType request with HTTP info returned
         * @return ApiResponse&lt;EventTypeOut&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EventTypeOut> executeWithHttpInfo() throws ApiException {
            EventTypeUpdate eventTypeUpdate = buildBodyParams();
            return updateTypeWithHttpInfo(eventTypeName, eventTypeUpdate);
        }

        /**
         * Execute updateType request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EventTypeOut> _callback) throws ApiException {
            EventTypeUpdate eventTypeUpdate = buildBodyParams();
            return updateTypeAsync(eventTypeName, eventTypeUpdate, _callback);
        }
    }

    /**
     * Update Event Type
     * Update an event type.
     * @param eventTypeName The event type&#39;s name (required)
     * @param eventTypeUpdate  (required)
     * @return UpdateTypeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateTypeRequestBuilder updateType(String description, String eventTypeName) throws IllegalArgumentException {
        if (description == null) throw new IllegalArgumentException("\"description\" is required but got null");
            

        if (eventTypeName == null) throw new IllegalArgumentException("\"eventTypeName\" is required but got null");
            

        return new UpdateTypeRequestBuilder(description, eventTypeName);
    }
}
