/*
 * Svix API
 * Welcome to the Svix API documentation!  Useful links: [Homepage](https://www.svix.com) | [Support email](mailto:support+docs@svix.com) | [Blog](https://www.svix.com/blog/) | [Slack Community](https://www.svix.com/slack/)  # Introduction  This is the reference documentation and schemas for the [Svix webhook service](https://www.svix.com) API. For tutorials and other documentation please refer to [the documentation](https://docs.svix.com).  ## Main concepts  In Svix you have four important entities you will be interacting with:  - `messages`: these are the webhooks being sent. They can have contents and a few other properties. - `application`: this is where `messages` are sent to. Usually you want to create one application for each user on your platform. - `endpoint`: endpoints are the URLs messages will be sent to. Each application can have multiple `endpoints` and each message sent to that application will be sent to all of them (unless they are not subscribed to the sent event type). - `event-type`: event types are identifiers denoting the type of the message being sent. Event types are primarily used to decide which events are sent to which endpoint.   ## Authentication  Get your authentication token (`AUTH_TOKEN`) from the [Svix dashboard](https://dashboard.svix.com) and use it as part of the `Authorization` header as such: `Authorization: Bearer ${AUTH_TOKEN}`. For more information on authentication, please refer to the [authentication token docs](https://docs.svix.com/api-keys).     ## Code samples  The code samples assume you already have the respective libraries installed and you know how to use them. For the latest information on how to do that, please refer to [the documentation](https://docs.svix.com/).   ## Idempotency  Svix supports [idempotency](https://en.wikipedia.org/wiki/Idempotence) for safely retrying requests without accidentally performing the same operation twice. This is useful when an API call is disrupted in transit and you do not receive a response.  To perform an idempotent request, pass the idempotency key in the `Idempotency-Key` header to the request. The idempotency key should be a unique value generated by the client. You can create the key in however way you like, though we suggest using UUID v4, or any other string with enough entropy to avoid collisions.  Svix's idempotency works by saving the resulting status code and body of the first request made for any given idempotency key for any successful request. Subsequent requests with the same key return the same result for a period of up to 12 hours.  Please note that idempotency is only supported for `POST` requests.   ## Cross-Origin Resource Sharing  This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/). And that allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site. 
 *
 * The version of the OpenAPI document: 1.20.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ApplicationIn;
import com.konfigthis.client.model.ApplicationOut;
import com.konfigthis.client.model.ApplicationPatch;
import com.konfigthis.client.model.ListResponseApplicationOut;
import com.konfigthis.client.model.Ordering;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ApplicationApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ApplicationApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ApplicationApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewApplicationCall(ApplicationIn applicationIn, Boolean getIfExists, String idempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = applicationIn;

        // create path and map variables
        String localVarPath = "/api/v1/app";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (getIfExists != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("get_if_exists", getIfExists));
        }

        if (idempotencyKey != null) {
            localVarHeaderParams.put("idempotency-key", localVarApiClient.parameterToString(idempotencyKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewApplicationValidateBeforeCall(ApplicationIn applicationIn, Boolean getIfExists, String idempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applicationIn' is set
        if (applicationIn == null) {
            throw new ApiException("Missing the required parameter 'applicationIn' when calling createNewApplication(Async)");
        }

        return createNewApplicationCall(applicationIn, getIfExists, idempotencyKey, _callback);

    }


    private ApiResponse<ApplicationOut> createNewApplicationWithHttpInfo(ApplicationIn applicationIn, Boolean getIfExists, String idempotencyKey) throws ApiException {
        okhttp3.Call localVarCall = createNewApplicationValidateBeforeCall(applicationIn, getIfExists, idempotencyKey, null);
        Type localVarReturnType = new TypeToken<ApplicationOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewApplicationAsync(ApplicationIn applicationIn, Boolean getIfExists, String idempotencyKey, final ApiCallback<ApplicationOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewApplicationValidateBeforeCall(applicationIn, getIfExists, idempotencyKey, _callback);
        Type localVarReturnType = new TypeToken<ApplicationOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewApplicationRequestBuilder {
        private final String name;
        private Integer rateLimit;
        private String uid;
        private Map<String, String> metadata;
        private Boolean getIfExists;
        private String idempotencyKey;

        private CreateNewApplicationRequestBuilder(String name) {
            this.name = name;
        }

        /**
         * Set rateLimit
         * @param rateLimit  (optional)
         * @return CreateNewApplicationRequestBuilder
         */
        public CreateNewApplicationRequestBuilder rateLimit(Integer rateLimit) {
            this.rateLimit = rateLimit;
            return this;
        }
        
        /**
         * Set uid
         * @param uid Optional unique identifier for the application (optional)
         * @return CreateNewApplicationRequestBuilder
         */
        public CreateNewApplicationRequestBuilder uid(String uid) {
            this.uid = uid;
            return this;
        }
        
        /**
         * Set metadata
         * @param metadata  (optional)
         * @return CreateNewApplicationRequestBuilder
         */
        public CreateNewApplicationRequestBuilder metadata(Map<String, String> metadata) {
            this.metadata = metadata;
            return this;
        }
        
        /**
         * Set getIfExists
         * @param getIfExists Get an existing application, or create a new one if doesn&#39;t exist. It&#39;s two separate functions in the libs. (optional, default to false)
         * @return CreateNewApplicationRequestBuilder
         */
        public CreateNewApplicationRequestBuilder getIfExists(Boolean getIfExists) {
            this.getIfExists = getIfExists;
            return this;
        }
        
        /**
         * Set idempotencyKey
         * @param idempotencyKey The request&#39;s idempotency key (optional)
         * @return CreateNewApplicationRequestBuilder
         */
        public CreateNewApplicationRequestBuilder idempotencyKey(String idempotencyKey) {
            this.idempotencyKey = idempotencyKey;
            return this;
        }
        
        /**
         * Build call for createNewApplication
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ApplicationIn applicationIn = buildBodyParams();
            return createNewApplicationCall(applicationIn, getIfExists, idempotencyKey, _callback);
        }

        private ApplicationIn buildBodyParams() {
            ApplicationIn applicationIn = new ApplicationIn();
            applicationIn.name(this.name);
            applicationIn.rateLimit(this.rateLimit);
            applicationIn.uid(this.uid);
            applicationIn.metadata(this.metadata);
            return applicationIn;
        }

        /**
         * Execute createNewApplication request
         * @return ApplicationOut
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApplicationOut execute() throws ApiException {
            ApplicationIn applicationIn = buildBodyParams();
            ApiResponse<ApplicationOut> localVarResp = createNewApplicationWithHttpInfo(applicationIn, getIfExists, idempotencyKey);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewApplication request with HTTP info returned
         * @return ApiResponse&lt;ApplicationOut&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ApplicationOut> executeWithHttpInfo() throws ApiException {
            ApplicationIn applicationIn = buildBodyParams();
            return createNewApplicationWithHttpInfo(applicationIn, getIfExists, idempotencyKey);
        }

        /**
         * Execute createNewApplication request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ApplicationOut> _callback) throws ApiException {
            ApplicationIn applicationIn = buildBodyParams();
            return createNewApplicationAsync(applicationIn, getIfExists, idempotencyKey, _callback);
        }
    }

    /**
     * Create Application
     * Create a new application.
     * @param applicationIn  (required)
     * @return CreateNewApplicationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewApplicationRequestBuilder createNewApplication(String name) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            if (name != null && name.length() < 1) {
              throw new IllegalArgumentException("Invalid value for name. Length must be greater than or equal to 1.");
            }

        return new CreateNewApplicationRequestBuilder(name);
    }
    private okhttp3.Call getByIdCall(String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/app/{app_id}"
            .replace("{" + "app_id" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getById(Async)");
        }

        return getByIdCall(appId, _callback);

    }


    private ApiResponse<ApplicationOut> getByIdWithHttpInfo(String appId) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(appId, null);
        Type localVarReturnType = new TypeToken<ApplicationOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String appId, final ApiCallback<ApplicationOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(appId, _callback);
        Type localVarReturnType = new TypeToken<ApplicationOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String appId;

        private GetByIdRequestBuilder(String appId) {
            this.appId = appId;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(appId, _callback);
        }


        /**
         * Execute getById request
         * @return ApplicationOut
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApplicationOut execute() throws ApiException {
            ApiResponse<ApplicationOut> localVarResp = getByIdWithHttpInfo(appId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;ApplicationOut&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ApplicationOut> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(appId);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ApplicationOut> _callback) throws ApiException {
            return getByIdAsync(appId, _callback);
        }
    }

    /**
     * Get Application
     * Get an application.
     * @param appId The app&#39;s ID or UID (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String appId) throws IllegalArgumentException {
        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            if (appId != null && appId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for appId. Length must be greater than or equal to 1.");
            }

        return new GetByIdRequestBuilder(appId);
    }
    private okhttp3.Call listAllCall(Integer limit, String iterator, Ordering order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/app";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (iterator != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("iterator", iterator));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllValidateBeforeCall(Integer limit, String iterator, Ordering order, final ApiCallback _callback) throws ApiException {
        return listAllCall(limit, iterator, order, _callback);

    }


    private ApiResponse<ListResponseApplicationOut> listAllWithHttpInfo(Integer limit, String iterator, Ordering order) throws ApiException {
        okhttp3.Call localVarCall = listAllValidateBeforeCall(limit, iterator, order, null);
        Type localVarReturnType = new TypeToken<ListResponseApplicationOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAllAsync(Integer limit, String iterator, Ordering order, final ApiCallback<ListResponseApplicationOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllValidateBeforeCall(limit, iterator, order, _callback);
        Type localVarReturnType = new TypeToken<ListResponseApplicationOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAllRequestBuilder {
        private Integer limit;
        private String iterator;
        private Ordering order;

        private ListAllRequestBuilder() {
        }

        /**
         * Set limit
         * @param limit Limit the number of returned items (optional)
         * @return ListAllRequestBuilder
         */
        public ListAllRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set iterator
         * @param iterator The iterator returned from a prior invocation (optional)
         * @return ListAllRequestBuilder
         */
        public ListAllRequestBuilder iterator(String iterator) {
            this.iterator = iterator;
            return this;
        }
        
        /**
         * Set order
         * @param order The sorting order of the returned items (optional)
         * @return ListAllRequestBuilder
         */
        public ListAllRequestBuilder order(Ordering order) {
            this.order = order;
            return this;
        }
        
        /**
         * Build call for listAll
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAllCall(limit, iterator, order, _callback);
        }


        /**
         * Execute listAll request
         * @return ListResponseApplicationOut
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ListResponseApplicationOut execute() throws ApiException {
            ApiResponse<ListResponseApplicationOut> localVarResp = listAllWithHttpInfo(limit, iterator, order);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAll request with HTTP info returned
         * @return ApiResponse&lt;ListResponseApplicationOut&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListResponseApplicationOut> executeWithHttpInfo() throws ApiException {
            return listAllWithHttpInfo(limit, iterator, order);
        }

        /**
         * Execute listAll request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListResponseApplicationOut> _callback) throws ApiException {
            return listAllAsync(limit, iterator, order, _callback);
        }
    }

    /**
     * List Applications
     * List of all the organization&#39;s applications.
     * @return ListAllRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ListAllRequestBuilder listAll() throws IllegalArgumentException {
        return new ListAllRequestBuilder();
    }
    private okhttp3.Call partiallyUpdateCall(String appId, ApplicationPatch applicationPatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = applicationPatch;

        // create path and map variables
        String localVarPath = "/api/v1/app/{app_id}"
            .replace("{" + "app_id" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call partiallyUpdateValidateBeforeCall(String appId, ApplicationPatch applicationPatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling partiallyUpdate(Async)");
        }

        // verify the required parameter 'applicationPatch' is set
        if (applicationPatch == null) {
            throw new ApiException("Missing the required parameter 'applicationPatch' when calling partiallyUpdate(Async)");
        }

        return partiallyUpdateCall(appId, applicationPatch, _callback);

    }


    private ApiResponse<ApplicationOut> partiallyUpdateWithHttpInfo(String appId, ApplicationPatch applicationPatch) throws ApiException {
        okhttp3.Call localVarCall = partiallyUpdateValidateBeforeCall(appId, applicationPatch, null);
        Type localVarReturnType = new TypeToken<ApplicationOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call partiallyUpdateAsync(String appId, ApplicationPatch applicationPatch, final ApiCallback<ApplicationOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = partiallyUpdateValidateBeforeCall(appId, applicationPatch, _callback);
        Type localVarReturnType = new TypeToken<ApplicationOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class PartiallyUpdateRequestBuilder {
        private final String appId;
        private String name;
        private Integer rateLimit;
        private String uid;
        private Map<String, String> metadata;

        private PartiallyUpdateRequestBuilder(String appId) {
            this.appId = appId;
        }

        /**
         * Set name
         * @param name  (optional)
         * @return PartiallyUpdateRequestBuilder
         */
        public PartiallyUpdateRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set rateLimit
         * @param rateLimit  (optional)
         * @return PartiallyUpdateRequestBuilder
         */
        public PartiallyUpdateRequestBuilder rateLimit(Integer rateLimit) {
            this.rateLimit = rateLimit;
            return this;
        }
        
        /**
         * Set uid
         * @param uid The app&#39;s UID (optional)
         * @return PartiallyUpdateRequestBuilder
         */
        public PartiallyUpdateRequestBuilder uid(String uid) {
            this.uid = uid;
            return this;
        }
        
        /**
         * Set metadata
         * @param metadata  (optional)
         * @return PartiallyUpdateRequestBuilder
         */
        public PartiallyUpdateRequestBuilder metadata(Map<String, String> metadata) {
            this.metadata = metadata;
            return this;
        }
        
        /**
         * Build call for partiallyUpdate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ApplicationPatch applicationPatch = buildBodyParams();
            return partiallyUpdateCall(appId, applicationPatch, _callback);
        }

        private ApplicationPatch buildBodyParams() {
            ApplicationPatch applicationPatch = new ApplicationPatch();
            applicationPatch.name(this.name);
            applicationPatch.rateLimit(this.rateLimit);
            applicationPatch.uid(this.uid);
            applicationPatch.metadata(this.metadata);
            return applicationPatch;
        }

        /**
         * Execute partiallyUpdate request
         * @return ApplicationOut
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApplicationOut execute() throws ApiException {
            ApplicationPatch applicationPatch = buildBodyParams();
            ApiResponse<ApplicationOut> localVarResp = partiallyUpdateWithHttpInfo(appId, applicationPatch);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute partiallyUpdate request with HTTP info returned
         * @return ApiResponse&lt;ApplicationOut&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ApplicationOut> executeWithHttpInfo() throws ApiException {
            ApplicationPatch applicationPatch = buildBodyParams();
            return partiallyUpdateWithHttpInfo(appId, applicationPatch);
        }

        /**
         * Execute partiallyUpdate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ApplicationOut> _callback) throws ApiException {
            ApplicationPatch applicationPatch = buildBodyParams();
            return partiallyUpdateAsync(appId, applicationPatch, _callback);
        }
    }

    /**
     * Patch Application
     * Partially update an application.
     * @param appId The app&#39;s ID or UID (required)
     * @param applicationPatch  (required)
     * @return PartiallyUpdateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PartiallyUpdateRequestBuilder partiallyUpdate(String appId) throws IllegalArgumentException {
        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            if (appId != null && appId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for appId. Length must be greater than or equal to 1.");
            }

        return new PartiallyUpdateRequestBuilder(appId);
    }
    private okhttp3.Call removeAppCall(String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/app/{app_id}"
            .replace("{" + "app_id" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeAppValidateBeforeCall(String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling removeApp(Async)");
        }

        return removeAppCall(appId, _callback);

    }


    private ApiResponse<Void> removeAppWithHttpInfo(String appId) throws ApiException {
        okhttp3.Call localVarCall = removeAppValidateBeforeCall(appId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeAppAsync(String appId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeAppValidateBeforeCall(appId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveAppRequestBuilder {
        private final String appId;

        private RemoveAppRequestBuilder(String appId) {
            this.appId = appId;
        }

        /**
         * Build call for removeApp
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeAppCall(appId, _callback);
        }


        /**
         * Execute removeApp request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeAppWithHttpInfo(appId);
        }

        /**
         * Execute removeApp request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeAppWithHttpInfo(appId);
        }

        /**
         * Execute removeApp request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeAppAsync(appId, _callback);
        }
    }

    /**
     * Delete Application
     * Delete an application.
     * @param appId The app&#39;s ID or UID (required)
     * @return RemoveAppRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
     </table>
     */
    public RemoveAppRequestBuilder removeApp(String appId) throws IllegalArgumentException {
        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            if (appId != null && appId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for appId. Length must be greater than or equal to 1.");
            }

        return new RemoveAppRequestBuilder(appId);
    }
    private okhttp3.Call updateAppCall(String appId, ApplicationIn applicationIn, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = applicationIn;

        // create path and map variables
        String localVarPath = "/api/v1/app/{app_id}"
            .replace("{" + "app_id" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAppValidateBeforeCall(String appId, ApplicationIn applicationIn, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling updateApp(Async)");
        }

        // verify the required parameter 'applicationIn' is set
        if (applicationIn == null) {
            throw new ApiException("Missing the required parameter 'applicationIn' when calling updateApp(Async)");
        }

        return updateAppCall(appId, applicationIn, _callback);

    }


    private ApiResponse<ApplicationOut> updateAppWithHttpInfo(String appId, ApplicationIn applicationIn) throws ApiException {
        okhttp3.Call localVarCall = updateAppValidateBeforeCall(appId, applicationIn, null);
        Type localVarReturnType = new TypeToken<ApplicationOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateAppAsync(String appId, ApplicationIn applicationIn, final ApiCallback<ApplicationOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAppValidateBeforeCall(appId, applicationIn, _callback);
        Type localVarReturnType = new TypeToken<ApplicationOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateAppRequestBuilder {
        private final String name;
        private final String appId;
        private Integer rateLimit;
        private String uid;
        private Map<String, String> metadata;

        private UpdateAppRequestBuilder(String name, String appId) {
            this.name = name;
            this.appId = appId;
        }

        /**
         * Set rateLimit
         * @param rateLimit  (optional)
         * @return UpdateAppRequestBuilder
         */
        public UpdateAppRequestBuilder rateLimit(Integer rateLimit) {
            this.rateLimit = rateLimit;
            return this;
        }
        
        /**
         * Set uid
         * @param uid Optional unique identifier for the application (optional)
         * @return UpdateAppRequestBuilder
         */
        public UpdateAppRequestBuilder uid(String uid) {
            this.uid = uid;
            return this;
        }
        
        /**
         * Set metadata
         * @param metadata  (optional)
         * @return UpdateAppRequestBuilder
         */
        public UpdateAppRequestBuilder metadata(Map<String, String> metadata) {
            this.metadata = metadata;
            return this;
        }
        
        /**
         * Build call for updateApp
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ApplicationIn applicationIn = buildBodyParams();
            return updateAppCall(appId, applicationIn, _callback);
        }

        private ApplicationIn buildBodyParams() {
            ApplicationIn applicationIn = new ApplicationIn();
            applicationIn.name(this.name);
            applicationIn.rateLimit(this.rateLimit);
            applicationIn.uid(this.uid);
            applicationIn.metadata(this.metadata);
            return applicationIn;
        }

        /**
         * Execute updateApp request
         * @return ApplicationOut
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApplicationOut execute() throws ApiException {
            ApplicationIn applicationIn = buildBodyParams();
            ApiResponse<ApplicationOut> localVarResp = updateAppWithHttpInfo(appId, applicationIn);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateApp request with HTTP info returned
         * @return ApiResponse&lt;ApplicationOut&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ApplicationOut> executeWithHttpInfo() throws ApiException {
            ApplicationIn applicationIn = buildBodyParams();
            return updateAppWithHttpInfo(appId, applicationIn);
        }

        /**
         * Execute updateApp request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ApplicationOut> _callback) throws ApiException {
            ApplicationIn applicationIn = buildBodyParams();
            return updateAppAsync(appId, applicationIn, _callback);
        }
    }

    /**
     * Update Application
     * Update an application.
     * @param appId The app&#39;s ID or UID (required)
     * @param applicationIn  (required)
     * @return UpdateAppRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateAppRequestBuilder updateApp(String name, String appId) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            if (name != null && name.length() < 1) {
              throw new IllegalArgumentException("Invalid value for name. Length must be greater than or equal to 1.");
            }

        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            if (appId != null && appId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for appId. Length must be greater than or equal to 1.");
            }

        return new UpdateAppRequestBuilder(name, appId);
    }
}
