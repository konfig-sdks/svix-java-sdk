/*
 * Svix API
 * Welcome to the Svix API documentation!  Useful links: [Homepage](https://www.svix.com) | [Support email](mailto:support+docs@svix.com) | [Blog](https://www.svix.com/blog/) | [Slack Community](https://www.svix.com/slack/)  # Introduction  This is the reference documentation and schemas for the [Svix webhook service](https://www.svix.com) API. For tutorials and other documentation please refer to [the documentation](https://docs.svix.com).  ## Main concepts  In Svix you have four important entities you will be interacting with:  - `messages`: these are the webhooks being sent. They can have contents and a few other properties. - `application`: this is where `messages` are sent to. Usually you want to create one application for each user on your platform. - `endpoint`: endpoints are the URLs messages will be sent to. Each application can have multiple `endpoints` and each message sent to that application will be sent to all of them (unless they are not subscribed to the sent event type). - `event-type`: event types are identifiers denoting the type of the message being sent. Event types are primarily used to decide which events are sent to which endpoint.   ## Authentication  Get your authentication token (`AUTH_TOKEN`) from the [Svix dashboard](https://dashboard.svix.com) and use it as part of the `Authorization` header as such: `Authorization: Bearer ${AUTH_TOKEN}`. For more information on authentication, please refer to the [authentication token docs](https://docs.svix.com/api-keys).     ## Code samples  The code samples assume you already have the respective libraries installed and you know how to use them. For the latest information on how to do that, please refer to [the documentation](https://docs.svix.com/).   ## Idempotency  Svix supports [idempotency](https://en.wikipedia.org/wiki/Idempotence) for safely retrying requests without accidentally performing the same operation twice. This is useful when an API call is disrupted in transit and you do not receive a response.  To perform an idempotent request, pass the idempotency key in the `Idempotency-Key` header to the request. The idempotency key should be a unique value generated by the client. You can create the key in however way you like, though we suggest using UUID v4, or any other string with enough entropy to avoid collisions.  Svix's idempotency works by saving the resulting status code and body of the first request made for any given idempotency key for any successful request. Subsequent requests with the same key return the same result for a period of up to 12 hours.  Please note that idempotency is only supported for `POST` requests.   ## Cross-Origin Resource Sharing  This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/). And that allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site. 
 *
 * The version of the OpenAPI document: 1.21.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AggregateEventTypesOut;
import com.konfigthis.client.model.AppUsageStatsIn;
import com.konfigthis.client.model.AppUsageStatsOut;
import java.time.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class StatisticsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public StatisticsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public StatisticsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call calculateEventTypesForAppsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/stats/usage/event-types";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call calculateEventTypesForAppsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return calculateEventTypesForAppsCall(_callback);

    }


    private ApiResponse<AggregateEventTypesOut> calculateEventTypesForAppsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = calculateEventTypesForAppsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<AggregateEventTypesOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call calculateEventTypesForAppsAsync(final ApiCallback<AggregateEventTypesOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = calculateEventTypesForAppsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<AggregateEventTypesOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CalculateEventTypesForAppsRequestBuilder {

        private CalculateEventTypesForAppsRequestBuilder() {
        }

        /**
         * Build call for calculateEventTypesForApps
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return calculateEventTypesForAppsCall(_callback);
        }


        /**
         * Execute calculateEventTypesForApps request
         * @return AggregateEventTypesOut
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public AggregateEventTypesOut execute() throws ApiException {
            ApiResponse<AggregateEventTypesOut> localVarResp = calculateEventTypesForAppsWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute calculateEventTypesForApps request with HTTP info returned
         * @return ApiResponse&lt;AggregateEventTypesOut&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AggregateEventTypesOut> executeWithHttpInfo() throws ApiException {
            return calculateEventTypesForAppsWithHttpInfo();
        }

        /**
         * Execute calculateEventTypesForApps request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AggregateEventTypesOut> _callback) throws ApiException {
            return calculateEventTypesForAppsAsync(_callback);
        }
    }

    /**
     * Aggregate Event Types
     * Creates a background task to calculate the listed event types for all apps in the organization.  Note that this endpoint is asynchronous. You will need to poll the &#x60;Get Background Task&#x60; endpoint to retrieve the results of the operation.
     * @return CalculateEventTypesForAppsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CalculateEventTypesForAppsRequestBuilder calculateEventTypesForApps() throws IllegalArgumentException {
        return new CalculateEventTypesForAppsRequestBuilder();
    }
    private okhttp3.Call calculateMessageDestinationsForAppsCall(AppUsageStatsIn appUsageStatsIn, String idempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = appUsageStatsIn;

        // create path and map variables
        String localVarPath = "/api/v1/stats/usage/app";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (idempotencyKey != null) {
            localVarHeaderParams.put("idempotency-key", localVarApiClient.parameterToString(idempotencyKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call calculateMessageDestinationsForAppsValidateBeforeCall(AppUsageStatsIn appUsageStatsIn, String idempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appUsageStatsIn' is set
        if (appUsageStatsIn == null) {
            throw new ApiException("Missing the required parameter 'appUsageStatsIn' when calling calculateMessageDestinationsForApps(Async)");
        }

        return calculateMessageDestinationsForAppsCall(appUsageStatsIn, idempotencyKey, _callback);

    }


    private ApiResponse<AppUsageStatsOut> calculateMessageDestinationsForAppsWithHttpInfo(AppUsageStatsIn appUsageStatsIn, String idempotencyKey) throws ApiException {
        okhttp3.Call localVarCall = calculateMessageDestinationsForAppsValidateBeforeCall(appUsageStatsIn, idempotencyKey, null);
        Type localVarReturnType = new TypeToken<AppUsageStatsOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call calculateMessageDestinationsForAppsAsync(AppUsageStatsIn appUsageStatsIn, String idempotencyKey, final ApiCallback<AppUsageStatsOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = calculateMessageDestinationsForAppsValidateBeforeCall(appUsageStatsIn, idempotencyKey, _callback);
        Type localVarReturnType = new TypeToken<AppUsageStatsOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CalculateMessageDestinationsForAppsRequestBuilder {
        private final OffsetDateTime since;
        private final OffsetDateTime until;
        private Set<String> appIds;
        private String idempotencyKey;

        private CalculateMessageDestinationsForAppsRequestBuilder(OffsetDateTime since, OffsetDateTime until) {
            this.since = since;
            this.until = until;
        }

        /**
         * Set appIds
         * @param appIds  (optional)
         * @return CalculateMessageDestinationsForAppsRequestBuilder
         */
        public CalculateMessageDestinationsForAppsRequestBuilder appIds(Set<String> appIds) {
            this.appIds = appIds;
            return this;
        }
        
        /**
         * Set idempotencyKey
         * @param idempotencyKey The request&#39;s idempotency key (optional)
         * @return CalculateMessageDestinationsForAppsRequestBuilder
         */
        public CalculateMessageDestinationsForAppsRequestBuilder idempotencyKey(String idempotencyKey) {
            this.idempotencyKey = idempotencyKey;
            return this;
        }
        
        /**
         * Build call for calculateMessageDestinationsForApps
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AppUsageStatsIn appUsageStatsIn = buildBodyParams();
            return calculateMessageDestinationsForAppsCall(appUsageStatsIn, idempotencyKey, _callback);
        }

        private AppUsageStatsIn buildBodyParams() {
            AppUsageStatsIn appUsageStatsIn = new AppUsageStatsIn();
            appUsageStatsIn.since(this.since);
            appUsageStatsIn.until(this.until);
            appUsageStatsIn.appIds(this.appIds);
            return appUsageStatsIn;
        }

        /**
         * Execute calculateMessageDestinationsForApps request
         * @return AppUsageStatsOut
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public AppUsageStatsOut execute() throws ApiException {
            AppUsageStatsIn appUsageStatsIn = buildBodyParams();
            ApiResponse<AppUsageStatsOut> localVarResp = calculateMessageDestinationsForAppsWithHttpInfo(appUsageStatsIn, idempotencyKey);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute calculateMessageDestinationsForApps request with HTTP info returned
         * @return ApiResponse&lt;AppUsageStatsOut&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AppUsageStatsOut> executeWithHttpInfo() throws ApiException {
            AppUsageStatsIn appUsageStatsIn = buildBodyParams();
            return calculateMessageDestinationsForAppsWithHttpInfo(appUsageStatsIn, idempotencyKey);
        }

        /**
         * Execute calculateMessageDestinationsForApps request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AppUsageStatsOut> _callback) throws ApiException {
            AppUsageStatsIn appUsageStatsIn = buildBodyParams();
            return calculateMessageDestinationsForAppsAsync(appUsageStatsIn, idempotencyKey, _callback);
        }
    }

    /**
     * Aggregate App Stats
     * Creates a background task to calculate the message destinations for all applications in the environment.  Note that this endpoint is asynchronous. You will need to poll the &#x60;Get Background Task&#x60; endpoint to retrieve the results of the operation.
     * @param appUsageStatsIn  (required)
     * @return CalculateMessageDestinationsForAppsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CalculateMessageDestinationsForAppsRequestBuilder calculateMessageDestinationsForApps(OffsetDateTime since, OffsetDateTime until) throws IllegalArgumentException {
        if (since == null) throw new IllegalArgumentException("\"since\" is required but got null");
        if (until == null) throw new IllegalArgumentException("\"until\" is required but got null");
        return new CalculateMessageDestinationsForAppsRequestBuilder(since, until);
    }
}
