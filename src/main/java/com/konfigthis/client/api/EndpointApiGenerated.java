/*
 * Svix API
 * Welcome to the Svix API documentation!  Useful links: [Homepage](https://www.svix.com) | [Support email](mailto:support+docs@svix.com) | [Blog](https://www.svix.com/blog/) | [Slack Community](https://www.svix.com/slack/)  # Introduction  This is the reference documentation and schemas for the [Svix webhook service](https://www.svix.com) API. For tutorials and other documentation please refer to [the documentation](https://docs.svix.com).  ## Main concepts  In Svix you have four important entities you will be interacting with:  - `messages`: these are the webhooks being sent. They can have contents and a few other properties. - `application`: this is where `messages` are sent to. Usually you want to create one application for each user on your platform. - `endpoint`: endpoints are the URLs messages will be sent to. Each application can have multiple `endpoints` and each message sent to that application will be sent to all of them (unless they are not subscribed to the sent event type). - `event-type`: event types are identifiers denoting the type of the message being sent. Event types are primarily used to decide which events are sent to which endpoint.   ## Authentication  Get your authentication token (`AUTH_TOKEN`) from the [Svix dashboard](https://dashboard.svix.com) and use it as part of the `Authorization` header as such: `Authorization: Bearer ${AUTH_TOKEN}`. For more information on authentication, please refer to the [authentication token docs](https://docs.svix.com/api-keys).     ## Code samples  The code samples assume you already have the respective libraries installed and you know how to use them. For the latest information on how to do that, please refer to [the documentation](https://docs.svix.com/).   ## Idempotency  Svix supports [idempotency](https://en.wikipedia.org/wiki/Idempotence) for safely retrying requests without accidentally performing the same operation twice. This is useful when an API call is disrupted in transit and you do not receive a response.  To perform an idempotent request, pass the idempotency key in the `Idempotency-Key` header to the request. The idempotency key should be a unique value generated by the client. You can create the key in however way you like, though we suggest using UUID v4, or any other string with enough entropy to avoid collisions.  Svix's idempotency works by saving the resulting status code and body of the first request made for any given idempotency key for any successful request. Subsequent requests with the same key return the same result for a period of up to 12 hours.  Please note that idempotency is only supported for `POST` requests.   ## Cross-Origin Resource Sharing  This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/). And that allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site. 
 *
 * The version of the OpenAPI document: 1.21.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.EndpointHeadersIn;
import com.konfigthis.client.model.EndpointHeadersOut;
import com.konfigthis.client.model.EndpointHeadersPatchIn;
import com.konfigthis.client.model.EndpointIn;
import com.konfigthis.client.model.EndpointOut;
import com.konfigthis.client.model.EndpointPatch;
import com.konfigthis.client.model.EndpointSecretOut;
import com.konfigthis.client.model.EndpointSecretRotateIn;
import com.konfigthis.client.model.EndpointStats;
import com.konfigthis.client.model.EndpointTransformationIn;
import com.konfigthis.client.model.EndpointTransformationOut;
import com.konfigthis.client.model.EndpointUpdate;
import com.konfigthis.client.model.EventExampleIn;
import com.konfigthis.client.model.ListResponseEndpointOut;
import com.konfigthis.client.model.MessageOut;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.Ordering;
import com.konfigthis.client.model.RecoverIn;
import com.konfigthis.client.model.RecoverOut;
import com.konfigthis.client.model.ReplayIn;
import com.konfigthis.client.model.ReplayOut;
import java.net.URI;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class EndpointApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EndpointApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public EndpointApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createOrUpdateCall(String appId, EndpointIn endpointIn, String idempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = endpointIn;

        // create path and map variables
        String localVarPath = "/api/v1/app/{app_id}/endpoint"
            .replace("{" + "app_id" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (idempotencyKey != null) {
            localVarHeaderParams.put("idempotency-key", localVarApiClient.parameterToString(idempotencyKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOrUpdateValidateBeforeCall(String appId, EndpointIn endpointIn, String idempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling createOrUpdate(Async)");
        }

        // verify the required parameter 'endpointIn' is set
        if (endpointIn == null) {
            throw new ApiException("Missing the required parameter 'endpointIn' when calling createOrUpdate(Async)");
        }

        return createOrUpdateCall(appId, endpointIn, idempotencyKey, _callback);

    }


    private ApiResponse<EndpointOut> createOrUpdateWithHttpInfo(String appId, EndpointIn endpointIn, String idempotencyKey) throws ApiException {
        okhttp3.Call localVarCall = createOrUpdateValidateBeforeCall(appId, endpointIn, idempotencyKey, null);
        Type localVarReturnType = new TypeToken<EndpointOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createOrUpdateAsync(String appId, EndpointIn endpointIn, String idempotencyKey, final ApiCallback<EndpointOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOrUpdateValidateBeforeCall(appId, endpointIn, idempotencyKey, _callback);
        Type localVarReturnType = new TypeToken<EndpointOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateOrUpdateRequestBuilder {
        private final URI url;
        private final String appId;
        private String description;
        private Integer version;
        private Integer rateLimit;
        private String uid;
        private Boolean disabled;
        private Set<String> filterTypes;
        private Set<String> channels;
        private String secret;
        private Map<String, String> metadata;
        private String idempotencyKey;

        private CreateOrUpdateRequestBuilder(URI url, String appId) {
            this.url = url;
            this.appId = appId;
        }

        /**
         * Set description
         * @param description  (optional, default to )
         * @return CreateOrUpdateRequestBuilder
         */
        public CreateOrUpdateRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set version
         * @param version  (optional, default to 1)
         * @return CreateOrUpdateRequestBuilder
         */
        public CreateOrUpdateRequestBuilder version(Integer version) {
            this.version = version;
            return this;
        }
        
        /**
         * Set rateLimit
         * @param rateLimit  (optional)
         * @return CreateOrUpdateRequestBuilder
         */
        public CreateOrUpdateRequestBuilder rateLimit(Integer rateLimit) {
            this.rateLimit = rateLimit;
            return this;
        }
        
        /**
         * Set uid
         * @param uid Optional unique identifier for the endpoint (optional)
         * @return CreateOrUpdateRequestBuilder
         */
        public CreateOrUpdateRequestBuilder uid(String uid) {
            this.uid = uid;
            return this;
        }
        
        /**
         * Set disabled
         * @param disabled  (optional, default to false)
         * @return CreateOrUpdateRequestBuilder
         */
        public CreateOrUpdateRequestBuilder disabled(Boolean disabled) {
            this.disabled = disabled;
            return this;
        }
        
        /**
         * Set filterTypes
         * @param filterTypes  (optional)
         * @return CreateOrUpdateRequestBuilder
         */
        public CreateOrUpdateRequestBuilder filterTypes(Set<String> filterTypes) {
            this.filterTypes = filterTypes;
            return this;
        }
        
        /**
         * Set channels
         * @param channels List of message channels this endpoint listens to (omit for all) (optional)
         * @return CreateOrUpdateRequestBuilder
         */
        public CreateOrUpdateRequestBuilder channels(Set<String> channels) {
            this.channels = channels;
            return this;
        }
        
        /**
         * Set secret
         * @param secret The endpoint&#39;s verification secret. If &#x60;null&#x60; is passed, a secret is automatically generated. Format: &#x60;base64&#x60; encoded random bytes optionally prefixed with &#x60;whsec_&#x60;. Recommended size: 24. (optional)
         * @return CreateOrUpdateRequestBuilder
         */
        public CreateOrUpdateRequestBuilder secret(String secret) {
            this.secret = secret;
            return this;
        }
        
        /**
         * Set metadata
         * @param metadata  (optional)
         * @return CreateOrUpdateRequestBuilder
         */
        public CreateOrUpdateRequestBuilder metadata(Map<String, String> metadata) {
            this.metadata = metadata;
            return this;
        }
        
        /**
         * Set idempotencyKey
         * @param idempotencyKey The request&#39;s idempotency key (optional)
         * @return CreateOrUpdateRequestBuilder
         */
        public CreateOrUpdateRequestBuilder idempotencyKey(String idempotencyKey) {
            this.idempotencyKey = idempotencyKey;
            return this;
        }
        
        /**
         * Build call for createOrUpdate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EndpointIn endpointIn = buildBodyParams();
            return createOrUpdateCall(appId, endpointIn, idempotencyKey, _callback);
        }

        private EndpointIn buildBodyParams() {
            EndpointIn endpointIn = new EndpointIn();
            endpointIn.description(this.description);
            endpointIn.version(this.version);
            endpointIn.rateLimit(this.rateLimit);
            endpointIn.uid(this.uid);
            endpointIn.url(this.url);
            endpointIn.disabled(this.disabled);
            endpointIn.filterTypes(this.filterTypes);
            endpointIn.channels(this.channels);
            endpointIn.secret(this.secret);
            endpointIn.metadata(this.metadata);
            return endpointIn;
        }

        /**
         * Execute createOrUpdate request
         * @return EndpointOut
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public EndpointOut execute() throws ApiException {
            EndpointIn endpointIn = buildBodyParams();
            ApiResponse<EndpointOut> localVarResp = createOrUpdateWithHttpInfo(appId, endpointIn, idempotencyKey);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createOrUpdate request with HTTP info returned
         * @return ApiResponse&lt;EndpointOut&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EndpointOut> executeWithHttpInfo() throws ApiException {
            EndpointIn endpointIn = buildBodyParams();
            return createOrUpdateWithHttpInfo(appId, endpointIn, idempotencyKey);
        }

        /**
         * Execute createOrUpdate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EndpointOut> _callback) throws ApiException {
            EndpointIn endpointIn = buildBodyParams();
            return createOrUpdateAsync(appId, endpointIn, idempotencyKey, _callback);
        }
    }

    /**
     * Create Endpoint
     * Create a new endpoint for the application.  When &#x60;secret&#x60; is &#x60;null&#x60; the secret is automatically generated (recommended)
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointIn  (required)
     * @return CreateOrUpdateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public CreateOrUpdateRequestBuilder createOrUpdate(URI url, String appId) throws IllegalArgumentException {
        if (url == null) throw new IllegalArgumentException("\"url\" is required but got null");
            if (url != null && url.length() < 1) {
              throw new IllegalArgumentException("Invalid value for url. Length must be greater than or equal to 1.");
            }

        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            if (appId != null && appId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for appId. Length must be greater than or equal to 1.");
            }

        return new CreateOrUpdateRequestBuilder(url, appId);
    }
    private okhttp3.Call getDetailsCall(String appId, String endpointId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/app/{app_id}/endpoint/{endpoint_id}"
            .replace("{" + "app_id" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "endpoint_id" + "}", localVarApiClient.escapeString(endpointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDetailsValidateBeforeCall(String appId, String endpointId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getDetails(Async)");
        }

        // verify the required parameter 'endpointId' is set
        if (endpointId == null) {
            throw new ApiException("Missing the required parameter 'endpointId' when calling getDetails(Async)");
        }

        return getDetailsCall(appId, endpointId, _callback);

    }


    private ApiResponse<EndpointOut> getDetailsWithHttpInfo(String appId, String endpointId) throws ApiException {
        okhttp3.Call localVarCall = getDetailsValidateBeforeCall(appId, endpointId, null);
        Type localVarReturnType = new TypeToken<EndpointOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDetailsAsync(String appId, String endpointId, final ApiCallback<EndpointOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDetailsValidateBeforeCall(appId, endpointId, _callback);
        Type localVarReturnType = new TypeToken<EndpointOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDetailsRequestBuilder {
        private final String appId;
        private final String endpointId;

        private GetDetailsRequestBuilder(String appId, String endpointId) {
            this.appId = appId;
            this.endpointId = endpointId;
        }

        /**
         * Build call for getDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDetailsCall(appId, endpointId, _callback);
        }


        /**
         * Execute getDetails request
         * @return EndpointOut
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public EndpointOut execute() throws ApiException {
            ApiResponse<EndpointOut> localVarResp = getDetailsWithHttpInfo(appId, endpointId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDetails request with HTTP info returned
         * @return ApiResponse&lt;EndpointOut&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EndpointOut> executeWithHttpInfo() throws ApiException {
            return getDetailsWithHttpInfo(appId, endpointId);
        }

        /**
         * Execute getDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EndpointOut> _callback) throws ApiException {
            return getDetailsAsync(appId, endpointId, _callback);
        }
    }

    /**
     * Get Endpoint
     * Get an endpoint.
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @return GetDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetDetailsRequestBuilder getDetails(String appId, String endpointId) throws IllegalArgumentException {
        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            if (appId != null && appId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for appId. Length must be greater than or equal to 1.");
            }

        if (endpointId == null) throw new IllegalArgumentException("\"endpointId\" is required but got null");
            if (endpointId != null && endpointId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for endpointId. Length must be greater than or equal to 1.");
            }

        return new GetDetailsRequestBuilder(appId, endpointId);
    }
    private okhttp3.Call getHeadersCall(String appId, String endpointId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/app/{app_id}/endpoint/{endpoint_id}/headers"
            .replace("{" + "app_id" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "endpoint_id" + "}", localVarApiClient.escapeString(endpointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getHeadersValidateBeforeCall(String appId, String endpointId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getHeaders(Async)");
        }

        // verify the required parameter 'endpointId' is set
        if (endpointId == null) {
            throw new ApiException("Missing the required parameter 'endpointId' when calling getHeaders(Async)");
        }

        return getHeadersCall(appId, endpointId, _callback);

    }


    private ApiResponse<EndpointHeadersOut> getHeadersWithHttpInfo(String appId, String endpointId) throws ApiException {
        okhttp3.Call localVarCall = getHeadersValidateBeforeCall(appId, endpointId, null);
        Type localVarReturnType = new TypeToken<EndpointHeadersOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getHeadersAsync(String appId, String endpointId, final ApiCallback<EndpointHeadersOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = getHeadersValidateBeforeCall(appId, endpointId, _callback);
        Type localVarReturnType = new TypeToken<EndpointHeadersOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetHeadersRequestBuilder {
        private final String appId;
        private final String endpointId;

        private GetHeadersRequestBuilder(String appId, String endpointId) {
            this.appId = appId;
            this.endpointId = endpointId;
        }

        /**
         * Build call for getHeaders
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getHeadersCall(appId, endpointId, _callback);
        }


        /**
         * Execute getHeaders request
         * @return EndpointHeadersOut
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public EndpointHeadersOut execute() throws ApiException {
            ApiResponse<EndpointHeadersOut> localVarResp = getHeadersWithHttpInfo(appId, endpointId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getHeaders request with HTTP info returned
         * @return ApiResponse&lt;EndpointHeadersOut&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EndpointHeadersOut> executeWithHttpInfo() throws ApiException {
            return getHeadersWithHttpInfo(appId, endpointId);
        }

        /**
         * Execute getHeaders request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EndpointHeadersOut> _callback) throws ApiException {
            return getHeadersAsync(appId, endpointId, _callback);
        }
    }

    /**
     * Get Endpoint Headers
     * Get the additional headers to be sent with the webhook
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @return GetHeadersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetHeadersRequestBuilder getHeaders(String appId, String endpointId) throws IllegalArgumentException {
        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            if (appId != null && appId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for appId. Length must be greater than or equal to 1.");
            }

        if (endpointId == null) throw new IllegalArgumentException("\"endpointId\" is required but got null");
            if (endpointId != null && endpointId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for endpointId. Length must be greater than or equal to 1.");
            }

        return new GetHeadersRequestBuilder(appId, endpointId);
    }
    private okhttp3.Call getSigningSecretCall(String appId, String endpointId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/app/{app_id}/endpoint/{endpoint_id}/secret"
            .replace("{" + "app_id" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "endpoint_id" + "}", localVarApiClient.escapeString(endpointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSigningSecretValidateBeforeCall(String appId, String endpointId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getSigningSecret(Async)");
        }

        // verify the required parameter 'endpointId' is set
        if (endpointId == null) {
            throw new ApiException("Missing the required parameter 'endpointId' when calling getSigningSecret(Async)");
        }

        return getSigningSecretCall(appId, endpointId, _callback);

    }


    private ApiResponse<EndpointSecretOut> getSigningSecretWithHttpInfo(String appId, String endpointId) throws ApiException {
        okhttp3.Call localVarCall = getSigningSecretValidateBeforeCall(appId, endpointId, null);
        Type localVarReturnType = new TypeToken<EndpointSecretOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSigningSecretAsync(String appId, String endpointId, final ApiCallback<EndpointSecretOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSigningSecretValidateBeforeCall(appId, endpointId, _callback);
        Type localVarReturnType = new TypeToken<EndpointSecretOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSigningSecretRequestBuilder {
        private final String appId;
        private final String endpointId;

        private GetSigningSecretRequestBuilder(String appId, String endpointId) {
            this.appId = appId;
            this.endpointId = endpointId;
        }

        /**
         * Build call for getSigningSecret
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSigningSecretCall(appId, endpointId, _callback);
        }


        /**
         * Execute getSigningSecret request
         * @return EndpointSecretOut
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public EndpointSecretOut execute() throws ApiException {
            ApiResponse<EndpointSecretOut> localVarResp = getSigningSecretWithHttpInfo(appId, endpointId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSigningSecret request with HTTP info returned
         * @return ApiResponse&lt;EndpointSecretOut&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EndpointSecretOut> executeWithHttpInfo() throws ApiException {
            return getSigningSecretWithHttpInfo(appId, endpointId);
        }

        /**
         * Execute getSigningSecret request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EndpointSecretOut> _callback) throws ApiException {
            return getSigningSecretAsync(appId, endpointId, _callback);
        }
    }

    /**
     * Get Endpoint Secret
     * Get the endpoint&#39;s signing secret.  This is used to verify the authenticity of the webhook. For more information please refer to [the consuming webhooks docs](https://docs.svix.com/consuming-webhooks/).
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @return GetSigningSecretRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetSigningSecretRequestBuilder getSigningSecret(String appId, String endpointId) throws IllegalArgumentException {
        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            if (appId != null && appId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for appId. Length must be greater than or equal to 1.");
            }

        if (endpointId == null) throw new IllegalArgumentException("\"endpointId\" is required but got null");
            if (endpointId != null && endpointId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for endpointId. Length must be greater than or equal to 1.");
            }

        return new GetSigningSecretRequestBuilder(appId, endpointId);
    }
    private okhttp3.Call getStatisticsCall(String appId, String endpointId, OffsetDateTime since, OffsetDateTime until, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/app/{app_id}/endpoint/{endpoint_id}/stats"
            .replace("{" + "app_id" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "endpoint_id" + "}", localVarApiClient.escapeString(endpointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (until != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("until", until));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStatisticsValidateBeforeCall(String appId, String endpointId, OffsetDateTime since, OffsetDateTime until, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getStatistics(Async)");
        }

        // verify the required parameter 'endpointId' is set
        if (endpointId == null) {
            throw new ApiException("Missing the required parameter 'endpointId' when calling getStatistics(Async)");
        }

        return getStatisticsCall(appId, endpointId, since, until, _callback);

    }


    private ApiResponse<EndpointStats> getStatisticsWithHttpInfo(String appId, String endpointId, OffsetDateTime since, OffsetDateTime until) throws ApiException {
        okhttp3.Call localVarCall = getStatisticsValidateBeforeCall(appId, endpointId, since, until, null);
        Type localVarReturnType = new TypeToken<EndpointStats>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getStatisticsAsync(String appId, String endpointId, OffsetDateTime since, OffsetDateTime until, final ApiCallback<EndpointStats> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStatisticsValidateBeforeCall(appId, endpointId, since, until, _callback);
        Type localVarReturnType = new TypeToken<EndpointStats>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetStatisticsRequestBuilder {
        private final String appId;
        private final String endpointId;
        private OffsetDateTime since;
        private OffsetDateTime until;

        private GetStatisticsRequestBuilder(String appId, String endpointId) {
            this.appId = appId;
            this.endpointId = endpointId;
        }

        /**
         * Set since
         * @param since Filter the range to data starting from this date (optional)
         * @return GetStatisticsRequestBuilder
         */
        public GetStatisticsRequestBuilder since(OffsetDateTime since) {
            this.since = since;
            return this;
        }
        
        /**
         * Set until
         * @param until Filter the range to data ending by this date (optional)
         * @return GetStatisticsRequestBuilder
         */
        public GetStatisticsRequestBuilder until(OffsetDateTime until) {
            this.until = until;
            return this;
        }
        
        /**
         * Build call for getStatistics
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getStatisticsCall(appId, endpointId, since, until, _callback);
        }


        /**
         * Execute getStatistics request
         * @return EndpointStats
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public EndpointStats execute() throws ApiException {
            ApiResponse<EndpointStats> localVarResp = getStatisticsWithHttpInfo(appId, endpointId, since, until);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getStatistics request with HTTP info returned
         * @return ApiResponse&lt;EndpointStats&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EndpointStats> executeWithHttpInfo() throws ApiException {
            return getStatisticsWithHttpInfo(appId, endpointId, since, until);
        }

        /**
         * Execute getStatistics request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EndpointStats> _callback) throws ApiException {
            return getStatisticsAsync(appId, endpointId, since, until, _callback);
        }
    }

    /**
     * Endpoint Stats
     * Get basic statistics for the endpoint.
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @return GetStatisticsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetStatisticsRequestBuilder getStatistics(String appId, String endpointId) throws IllegalArgumentException {
        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            if (appId != null && appId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for appId. Length must be greater than or equal to 1.");
            }

        if (endpointId == null) throw new IllegalArgumentException("\"endpointId\" is required but got null");
            if (endpointId != null && endpointId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for endpointId. Length must be greater than or equal to 1.");
            }

        return new GetStatisticsRequestBuilder(appId, endpointId);
    }
    private okhttp3.Call getTransformationCodeCall(String appId, String endpointId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/app/{app_id}/endpoint/{endpoint_id}/transformation"
            .replace("{" + "app_id" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "endpoint_id" + "}", localVarApiClient.escapeString(endpointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTransformationCodeValidateBeforeCall(String appId, String endpointId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getTransformationCode(Async)");
        }

        // verify the required parameter 'endpointId' is set
        if (endpointId == null) {
            throw new ApiException("Missing the required parameter 'endpointId' when calling getTransformationCode(Async)");
        }

        return getTransformationCodeCall(appId, endpointId, _callback);

    }


    private ApiResponse<EndpointTransformationOut> getTransformationCodeWithHttpInfo(String appId, String endpointId) throws ApiException {
        okhttp3.Call localVarCall = getTransformationCodeValidateBeforeCall(appId, endpointId, null);
        Type localVarReturnType = new TypeToken<EndpointTransformationOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTransformationCodeAsync(String appId, String endpointId, final ApiCallback<EndpointTransformationOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTransformationCodeValidateBeforeCall(appId, endpointId, _callback);
        Type localVarReturnType = new TypeToken<EndpointTransformationOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTransformationCodeRequestBuilder {
        private final String appId;
        private final String endpointId;

        private GetTransformationCodeRequestBuilder(String appId, String endpointId) {
            this.appId = appId;
            this.endpointId = endpointId;
        }

        /**
         * Build call for getTransformationCode
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTransformationCodeCall(appId, endpointId, _callback);
        }


        /**
         * Execute getTransformationCode request
         * @return EndpointTransformationOut
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public EndpointTransformationOut execute() throws ApiException {
            ApiResponse<EndpointTransformationOut> localVarResp = getTransformationCodeWithHttpInfo(appId, endpointId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTransformationCode request with HTTP info returned
         * @return ApiResponse&lt;EndpointTransformationOut&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EndpointTransformationOut> executeWithHttpInfo() throws ApiException {
            return getTransformationCodeWithHttpInfo(appId, endpointId);
        }

        /**
         * Execute getTransformationCode request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EndpointTransformationOut> _callback) throws ApiException {
            return getTransformationCodeAsync(appId, endpointId, _callback);
        }
    }

    /**
     * Get Endpoint Transformation
     * Get the transformation code associated with this endpoint
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @return GetTransformationCodeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public GetTransformationCodeRequestBuilder getTransformationCode(String appId, String endpointId) throws IllegalArgumentException {
        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            if (appId != null && appId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for appId. Length must be greater than or equal to 1.");
            }

        if (endpointId == null) throw new IllegalArgumentException("\"endpointId\" is required but got null");
            if (endpointId != null && endpointId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for endpointId. Length must be greater than or equal to 1.");
            }

        return new GetTransformationCodeRequestBuilder(appId, endpointId);
    }
    private okhttp3.Call listEndpointsCall(String appId, Integer limit, String iterator, Ordering order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/app/{app_id}/endpoint"
            .replace("{" + "app_id" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (iterator != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("iterator", iterator));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listEndpointsValidateBeforeCall(String appId, Integer limit, String iterator, Ordering order, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling listEndpoints(Async)");
        }

        return listEndpointsCall(appId, limit, iterator, order, _callback);

    }


    private ApiResponse<ListResponseEndpointOut> listEndpointsWithHttpInfo(String appId, Integer limit, String iterator, Ordering order) throws ApiException {
        okhttp3.Call localVarCall = listEndpointsValidateBeforeCall(appId, limit, iterator, order, null);
        Type localVarReturnType = new TypeToken<ListResponseEndpointOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listEndpointsAsync(String appId, Integer limit, String iterator, Ordering order, final ApiCallback<ListResponseEndpointOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = listEndpointsValidateBeforeCall(appId, limit, iterator, order, _callback);
        Type localVarReturnType = new TypeToken<ListResponseEndpointOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListEndpointsRequestBuilder {
        private final String appId;
        private Integer limit;
        private String iterator;
        private Ordering order;

        private ListEndpointsRequestBuilder(String appId) {
            this.appId = appId;
        }

        /**
         * Set limit
         * @param limit Limit the number of returned items (optional)
         * @return ListEndpointsRequestBuilder
         */
        public ListEndpointsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set iterator
         * @param iterator The iterator returned from a prior invocation (optional)
         * @return ListEndpointsRequestBuilder
         */
        public ListEndpointsRequestBuilder iterator(String iterator) {
            this.iterator = iterator;
            return this;
        }
        
        /**
         * Set order
         * @param order The sorting order of the returned items (optional)
         * @return ListEndpointsRequestBuilder
         */
        public ListEndpointsRequestBuilder order(Ordering order) {
            this.order = order;
            return this;
        }
        
        /**
         * Build call for listEndpoints
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listEndpointsCall(appId, limit, iterator, order, _callback);
        }


        /**
         * Execute listEndpoints request
         * @return ListResponseEndpointOut
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ListResponseEndpointOut execute() throws ApiException {
            ApiResponse<ListResponseEndpointOut> localVarResp = listEndpointsWithHttpInfo(appId, limit, iterator, order);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listEndpoints request with HTTP info returned
         * @return ApiResponse&lt;ListResponseEndpointOut&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListResponseEndpointOut> executeWithHttpInfo() throws ApiException {
            return listEndpointsWithHttpInfo(appId, limit, iterator, order);
        }

        /**
         * Execute listEndpoints request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListResponseEndpointOut> _callback) throws ApiException {
            return listEndpointsAsync(appId, limit, iterator, order, _callback);
        }
    }

    /**
     * List Endpoints
     * List the application&#39;s endpoints.
     * @param appId The app&#39;s ID or UID (required)
     * @return ListEndpointsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ListEndpointsRequestBuilder listEndpoints(String appId) throws IllegalArgumentException {
        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            if (appId != null && appId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for appId. Length must be greater than or equal to 1.");
            }

        return new ListEndpointsRequestBuilder(appId);
    }
    private okhttp3.Call partiallySetHeadersCall(String appId, String endpointId, EndpointHeadersPatchIn endpointHeadersPatchIn, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = endpointHeadersPatchIn;

        // create path and map variables
        String localVarPath = "/api/v1/app/{app_id}/endpoint/{endpoint_id}/headers"
            .replace("{" + "app_id" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "endpoint_id" + "}", localVarApiClient.escapeString(endpointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call partiallySetHeadersValidateBeforeCall(String appId, String endpointId, EndpointHeadersPatchIn endpointHeadersPatchIn, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling partiallySetHeaders(Async)");
        }

        // verify the required parameter 'endpointId' is set
        if (endpointId == null) {
            throw new ApiException("Missing the required parameter 'endpointId' when calling partiallySetHeaders(Async)");
        }

        // verify the required parameter 'endpointHeadersPatchIn' is set
        if (endpointHeadersPatchIn == null) {
            throw new ApiException("Missing the required parameter 'endpointHeadersPatchIn' when calling partiallySetHeaders(Async)");
        }

        return partiallySetHeadersCall(appId, endpointId, endpointHeadersPatchIn, _callback);

    }


    private ApiResponse<Void> partiallySetHeadersWithHttpInfo(String appId, String endpointId, EndpointHeadersPatchIn endpointHeadersPatchIn) throws ApiException {
        okhttp3.Call localVarCall = partiallySetHeadersValidateBeforeCall(appId, endpointId, endpointHeadersPatchIn, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call partiallySetHeadersAsync(String appId, String endpointId, EndpointHeadersPatchIn endpointHeadersPatchIn, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = partiallySetHeadersValidateBeforeCall(appId, endpointId, endpointHeadersPatchIn, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class PartiallySetHeadersRequestBuilder {
        private final Map<String, String> headers;
        private final String appId;
        private final String endpointId;

        private PartiallySetHeadersRequestBuilder(Map<String, String> headers, String appId, String endpointId) {
            this.headers = headers;
            this.appId = appId;
            this.endpointId = endpointId;
        }

        /**
         * Build call for partiallySetHeaders
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EndpointHeadersPatchIn endpointHeadersPatchIn = buildBodyParams();
            return partiallySetHeadersCall(appId, endpointId, endpointHeadersPatchIn, _callback);
        }

        private EndpointHeadersPatchIn buildBodyParams() {
            EndpointHeadersPatchIn endpointHeadersPatchIn = new EndpointHeadersPatchIn();
            endpointHeadersPatchIn.headers(this.headers);
            return endpointHeadersPatchIn;
        }

        /**
         * Execute partiallySetHeaders request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            EndpointHeadersPatchIn endpointHeadersPatchIn = buildBodyParams();
            partiallySetHeadersWithHttpInfo(appId, endpointId, endpointHeadersPatchIn);
        }

        /**
         * Execute partiallySetHeaders request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            EndpointHeadersPatchIn endpointHeadersPatchIn = buildBodyParams();
            return partiallySetHeadersWithHttpInfo(appId, endpointId, endpointHeadersPatchIn);
        }

        /**
         * Execute partiallySetHeaders request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            EndpointHeadersPatchIn endpointHeadersPatchIn = buildBodyParams();
            return partiallySetHeadersAsync(appId, endpointId, endpointHeadersPatchIn, _callback);
        }
    }

    /**
     * Patch Endpoint Headers
     * Partially set the additional headers to be sent with the webhook
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param endpointHeadersPatchIn  (required)
     * @return PartiallySetHeadersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
     </table>
     */
    public PartiallySetHeadersRequestBuilder partiallySetHeaders(Map<String, String> headers, String appId, String endpointId) throws IllegalArgumentException {
        if (headers == null) throw new IllegalArgumentException("\"headers\" is required but got null");
        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            if (appId != null && appId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for appId. Length must be greater than or equal to 1.");
            }

        if (endpointId == null) throw new IllegalArgumentException("\"endpointId\" is required but got null");
            if (endpointId != null && endpointId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for endpointId. Length must be greater than or equal to 1.");
            }

        return new PartiallySetHeadersRequestBuilder(headers, appId, endpointId);
    }
    private okhttp3.Call partiallyUpdateCall(String appId, String endpointId, EndpointPatch endpointPatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = endpointPatch;

        // create path and map variables
        String localVarPath = "/api/v1/app/{app_id}/endpoint/{endpoint_id}"
            .replace("{" + "app_id" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "endpoint_id" + "}", localVarApiClient.escapeString(endpointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call partiallyUpdateValidateBeforeCall(String appId, String endpointId, EndpointPatch endpointPatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling partiallyUpdate(Async)");
        }

        // verify the required parameter 'endpointId' is set
        if (endpointId == null) {
            throw new ApiException("Missing the required parameter 'endpointId' when calling partiallyUpdate(Async)");
        }

        // verify the required parameter 'endpointPatch' is set
        if (endpointPatch == null) {
            throw new ApiException("Missing the required parameter 'endpointPatch' when calling partiallyUpdate(Async)");
        }

        return partiallyUpdateCall(appId, endpointId, endpointPatch, _callback);

    }


    private ApiResponse<EndpointOut> partiallyUpdateWithHttpInfo(String appId, String endpointId, EndpointPatch endpointPatch) throws ApiException {
        okhttp3.Call localVarCall = partiallyUpdateValidateBeforeCall(appId, endpointId, endpointPatch, null);
        Type localVarReturnType = new TypeToken<EndpointOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call partiallyUpdateAsync(String appId, String endpointId, EndpointPatch endpointPatch, final ApiCallback<EndpointOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = partiallyUpdateValidateBeforeCall(appId, endpointId, endpointPatch, _callback);
        Type localVarReturnType = new TypeToken<EndpointOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class PartiallyUpdateRequestBuilder {
        private final String appId;
        private final String endpointId;
        private String description;
        private Integer version;
        private Integer rateLimit;
        private String uid;
        private URI url;
        private Boolean disabled;
        private Set<String> filterTypes;
        private Set<String> channels;
        private String secret;
        private Map<String, String> metadata;

        private PartiallyUpdateRequestBuilder(String appId, String endpointId) {
            this.appId = appId;
            this.endpointId = endpointId;
        }

        /**
         * Set description
         * @param description  (optional)
         * @return PartiallyUpdateRequestBuilder
         */
        public PartiallyUpdateRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set version
         * @param version  (optional)
         * @return PartiallyUpdateRequestBuilder
         */
        public PartiallyUpdateRequestBuilder version(Integer version) {
            this.version = version;
            return this;
        }
        
        /**
         * Set rateLimit
         * @param rateLimit  (optional)
         * @return PartiallyUpdateRequestBuilder
         */
        public PartiallyUpdateRequestBuilder rateLimit(Integer rateLimit) {
            this.rateLimit = rateLimit;
            return this;
        }
        
        /**
         * Set uid
         * @param uid The ep&#39;s UID (optional)
         * @return PartiallyUpdateRequestBuilder
         */
        public PartiallyUpdateRequestBuilder uid(String uid) {
            this.uid = uid;
            return this;
        }
        
        /**
         * Set url
         * @param url  (optional)
         * @return PartiallyUpdateRequestBuilder
         */
        public PartiallyUpdateRequestBuilder url(URI url) {
            this.url = url;
            return this;
        }
        
        /**
         * Set disabled
         * @param disabled  (optional)
         * @return PartiallyUpdateRequestBuilder
         */
        public PartiallyUpdateRequestBuilder disabled(Boolean disabled) {
            this.disabled = disabled;
            return this;
        }
        
        /**
         * Set filterTypes
         * @param filterTypes  (optional)
         * @return PartiallyUpdateRequestBuilder
         */
        public PartiallyUpdateRequestBuilder filterTypes(Set<String> filterTypes) {
            this.filterTypes = filterTypes;
            return this;
        }
        
        /**
         * Set channels
         * @param channels  (optional)
         * @return PartiallyUpdateRequestBuilder
         */
        public PartiallyUpdateRequestBuilder channels(Set<String> channels) {
            this.channels = channels;
            return this;
        }
        
        /**
         * Set secret
         * @param secret The endpoint&#39;s verification secret. If &#x60;null&#x60; is passed, a secret is automatically generated. Format: &#x60;base64&#x60; encoded random bytes optionally prefixed with &#x60;whsec_&#x60;. Recommended size: 24. (optional)
         * @return PartiallyUpdateRequestBuilder
         */
        public PartiallyUpdateRequestBuilder secret(String secret) {
            this.secret = secret;
            return this;
        }
        
        /**
         * Set metadata
         * @param metadata  (optional)
         * @return PartiallyUpdateRequestBuilder
         */
        public PartiallyUpdateRequestBuilder metadata(Map<String, String> metadata) {
            this.metadata = metadata;
            return this;
        }
        
        /**
         * Build call for partiallyUpdate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EndpointPatch endpointPatch = buildBodyParams();
            return partiallyUpdateCall(appId, endpointId, endpointPatch, _callback);
        }

        private EndpointPatch buildBodyParams() {
            EndpointPatch endpointPatch = new EndpointPatch();
            endpointPatch.description(this.description);
            endpointPatch.version(this.version);
            endpointPatch.rateLimit(this.rateLimit);
            endpointPatch.uid(this.uid);
            endpointPatch.url(this.url);
            endpointPatch.disabled(this.disabled);
            endpointPatch.filterTypes(this.filterTypes);
            endpointPatch.channels(this.channels);
            endpointPatch.secret(this.secret);
            endpointPatch.metadata(this.metadata);
            return endpointPatch;
        }

        /**
         * Execute partiallyUpdate request
         * @return EndpointOut
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public EndpointOut execute() throws ApiException {
            EndpointPatch endpointPatch = buildBodyParams();
            ApiResponse<EndpointOut> localVarResp = partiallyUpdateWithHttpInfo(appId, endpointId, endpointPatch);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute partiallyUpdate request with HTTP info returned
         * @return ApiResponse&lt;EndpointOut&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EndpointOut> executeWithHttpInfo() throws ApiException {
            EndpointPatch endpointPatch = buildBodyParams();
            return partiallyUpdateWithHttpInfo(appId, endpointId, endpointPatch);
        }

        /**
         * Execute partiallyUpdate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EndpointOut> _callback) throws ApiException {
            EndpointPatch endpointPatch = buildBodyParams();
            return partiallyUpdateAsync(appId, endpointId, endpointPatch, _callback);
        }
    }

    /**
     * Patch Endpoint
     * Partially update an endpoint.
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param endpointPatch  (required)
     * @return PartiallyUpdateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public PartiallyUpdateRequestBuilder partiallyUpdate(String appId, String endpointId) throws IllegalArgumentException {
        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            if (appId != null && appId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for appId. Length must be greater than or equal to 1.");
            }

        if (endpointId == null) throw new IllegalArgumentException("\"endpointId\" is required but got null");
            if (endpointId != null && endpointId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for endpointId. Length must be greater than or equal to 1.");
            }

        return new PartiallyUpdateRequestBuilder(appId, endpointId);
    }
    private okhttp3.Call removeCall(String appId, String endpointId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/app/{app_id}/endpoint/{endpoint_id}"
            .replace("{" + "app_id" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "endpoint_id" + "}", localVarApiClient.escapeString(endpointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeValidateBeforeCall(String appId, String endpointId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling remove(Async)");
        }

        // verify the required parameter 'endpointId' is set
        if (endpointId == null) {
            throw new ApiException("Missing the required parameter 'endpointId' when calling remove(Async)");
        }

        return removeCall(appId, endpointId, _callback);

    }


    private ApiResponse<Void> removeWithHttpInfo(String appId, String endpointId) throws ApiException {
        okhttp3.Call localVarCall = removeValidateBeforeCall(appId, endpointId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeAsync(String appId, String endpointId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeValidateBeforeCall(appId, endpointId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveRequestBuilder {
        private final String appId;
        private final String endpointId;

        private RemoveRequestBuilder(String appId, String endpointId) {
            this.appId = appId;
            this.endpointId = endpointId;
        }

        /**
         * Build call for remove
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeCall(appId, endpointId, _callback);
        }


        /**
         * Execute remove request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeWithHttpInfo(appId, endpointId);
        }

        /**
         * Execute remove request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeWithHttpInfo(appId, endpointId);
        }

        /**
         * Execute remove request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeAsync(appId, endpointId, _callback);
        }
    }

    /**
     * Delete Endpoint
     * Delete an endpoint.
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @return RemoveRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
     </table>
     */
    public RemoveRequestBuilder remove(String appId, String endpointId) throws IllegalArgumentException {
        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            if (appId != null && appId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for appId. Length must be greater than or equal to 1.");
            }

        if (endpointId == null) throw new IllegalArgumentException("\"endpointId\" is required but got null");
            if (endpointId != null && endpointId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for endpointId. Length must be greater than or equal to 1.");
            }

        return new RemoveRequestBuilder(appId, endpointId);
    }
    private okhttp3.Call replayMissingWebhooksCall(String appId, String endpointId, ReplayIn replayIn, String idempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = replayIn;

        // create path and map variables
        String localVarPath = "/api/v1/app/{app_id}/endpoint/{endpoint_id}/replay-missing"
            .replace("{" + "app_id" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "endpoint_id" + "}", localVarApiClient.escapeString(endpointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (idempotencyKey != null) {
            localVarHeaderParams.put("idempotency-key", localVarApiClient.parameterToString(idempotencyKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replayMissingWebhooksValidateBeforeCall(String appId, String endpointId, ReplayIn replayIn, String idempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling replayMissingWebhooks(Async)");
        }

        // verify the required parameter 'endpointId' is set
        if (endpointId == null) {
            throw new ApiException("Missing the required parameter 'endpointId' when calling replayMissingWebhooks(Async)");
        }

        // verify the required parameter 'replayIn' is set
        if (replayIn == null) {
            throw new ApiException("Missing the required parameter 'replayIn' when calling replayMissingWebhooks(Async)");
        }

        return replayMissingWebhooksCall(appId, endpointId, replayIn, idempotencyKey, _callback);

    }


    private ApiResponse<ReplayOut> replayMissingWebhooksWithHttpInfo(String appId, String endpointId, ReplayIn replayIn, String idempotencyKey) throws ApiException {
        okhttp3.Call localVarCall = replayMissingWebhooksValidateBeforeCall(appId, endpointId, replayIn, idempotencyKey, null);
        Type localVarReturnType = new TypeToken<ReplayOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call replayMissingWebhooksAsync(String appId, String endpointId, ReplayIn replayIn, String idempotencyKey, final ApiCallback<ReplayOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = replayMissingWebhooksValidateBeforeCall(appId, endpointId, replayIn, idempotencyKey, _callback);
        Type localVarReturnType = new TypeToken<ReplayOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ReplayMissingWebhooksRequestBuilder {
        private final OffsetDateTime since;
        private final String appId;
        private final String endpointId;
        private OffsetDateTime until;
        private String idempotencyKey;

        private ReplayMissingWebhooksRequestBuilder(OffsetDateTime since, String appId, String endpointId) {
            this.since = since;
            this.appId = appId;
            this.endpointId = endpointId;
        }

        /**
         * Set until
         * @param until  (optional)
         * @return ReplayMissingWebhooksRequestBuilder
         */
        public ReplayMissingWebhooksRequestBuilder until(OffsetDateTime until) {
            this.until = until;
            return this;
        }
        
        /**
         * Set idempotencyKey
         * @param idempotencyKey The request&#39;s idempotency key (optional)
         * @return ReplayMissingWebhooksRequestBuilder
         */
        public ReplayMissingWebhooksRequestBuilder idempotencyKey(String idempotencyKey) {
            this.idempotencyKey = idempotencyKey;
            return this;
        }
        
        /**
         * Build call for replayMissingWebhooks
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ReplayIn replayIn = buildBodyParams();
            return replayMissingWebhooksCall(appId, endpointId, replayIn, idempotencyKey, _callback);
        }

        private ReplayIn buildBodyParams() {
            ReplayIn replayIn = new ReplayIn();
            replayIn.since(this.since);
            replayIn.until(this.until);
            return replayIn;
        }

        /**
         * Execute replayMissingWebhooks request
         * @return ReplayOut
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ReplayOut execute() throws ApiException {
            ReplayIn replayIn = buildBodyParams();
            ApiResponse<ReplayOut> localVarResp = replayMissingWebhooksWithHttpInfo(appId, endpointId, replayIn, idempotencyKey);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute replayMissingWebhooks request with HTTP info returned
         * @return ApiResponse&lt;ReplayOut&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReplayOut> executeWithHttpInfo() throws ApiException {
            ReplayIn replayIn = buildBodyParams();
            return replayMissingWebhooksWithHttpInfo(appId, endpointId, replayIn, idempotencyKey);
        }

        /**
         * Execute replayMissingWebhooks request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReplayOut> _callback) throws ApiException {
            ReplayIn replayIn = buildBodyParams();
            return replayMissingWebhooksAsync(appId, endpointId, replayIn, idempotencyKey, _callback);
        }
    }

    /**
     * Replay Missing Webhooks
     * Replays messages to the endpoint. Only messages that were created after &#x60;since&#x60; will be sent. Messages that were previously sent to the endpoint are not resent.
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param replayIn  (required)
     * @return ReplayMissingWebhooksRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ReplayMissingWebhooksRequestBuilder replayMissingWebhooks(OffsetDateTime since, String appId, String endpointId) throws IllegalArgumentException {
        if (since == null) throw new IllegalArgumentException("\"since\" is required but got null");
        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            if (appId != null && appId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for appId. Length must be greater than or equal to 1.");
            }

        if (endpointId == null) throw new IllegalArgumentException("\"endpointId\" is required but got null");
            if (endpointId != null && endpointId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for endpointId. Length must be greater than or equal to 1.");
            }

        return new ReplayMissingWebhooksRequestBuilder(since, appId, endpointId);
    }
    private okhttp3.Call resendFailedMessagesCall(String appId, String endpointId, RecoverIn recoverIn, String idempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = recoverIn;

        // create path and map variables
        String localVarPath = "/api/v1/app/{app_id}/endpoint/{endpoint_id}/recover"
            .replace("{" + "app_id" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "endpoint_id" + "}", localVarApiClient.escapeString(endpointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (idempotencyKey != null) {
            localVarHeaderParams.put("idempotency-key", localVarApiClient.parameterToString(idempotencyKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resendFailedMessagesValidateBeforeCall(String appId, String endpointId, RecoverIn recoverIn, String idempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling resendFailedMessages(Async)");
        }

        // verify the required parameter 'endpointId' is set
        if (endpointId == null) {
            throw new ApiException("Missing the required parameter 'endpointId' when calling resendFailedMessages(Async)");
        }

        // verify the required parameter 'recoverIn' is set
        if (recoverIn == null) {
            throw new ApiException("Missing the required parameter 'recoverIn' when calling resendFailedMessages(Async)");
        }

        return resendFailedMessagesCall(appId, endpointId, recoverIn, idempotencyKey, _callback);

    }


    private ApiResponse<RecoverOut> resendFailedMessagesWithHttpInfo(String appId, String endpointId, RecoverIn recoverIn, String idempotencyKey) throws ApiException {
        okhttp3.Call localVarCall = resendFailedMessagesValidateBeforeCall(appId, endpointId, recoverIn, idempotencyKey, null);
        Type localVarReturnType = new TypeToken<RecoverOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call resendFailedMessagesAsync(String appId, String endpointId, RecoverIn recoverIn, String idempotencyKey, final ApiCallback<RecoverOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = resendFailedMessagesValidateBeforeCall(appId, endpointId, recoverIn, idempotencyKey, _callback);
        Type localVarReturnType = new TypeToken<RecoverOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ResendFailedMessagesRequestBuilder {
        private final OffsetDateTime since;
        private final String appId;
        private final String endpointId;
        private OffsetDateTime until;
        private String idempotencyKey;

        private ResendFailedMessagesRequestBuilder(OffsetDateTime since, String appId, String endpointId) {
            this.since = since;
            this.appId = appId;
            this.endpointId = endpointId;
        }

        /**
         * Set until
         * @param until  (optional)
         * @return ResendFailedMessagesRequestBuilder
         */
        public ResendFailedMessagesRequestBuilder until(OffsetDateTime until) {
            this.until = until;
            return this;
        }
        
        /**
         * Set idempotencyKey
         * @param idempotencyKey The request&#39;s idempotency key (optional)
         * @return ResendFailedMessagesRequestBuilder
         */
        public ResendFailedMessagesRequestBuilder idempotencyKey(String idempotencyKey) {
            this.idempotencyKey = idempotencyKey;
            return this;
        }
        
        /**
         * Build call for resendFailedMessages
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            RecoverIn recoverIn = buildBodyParams();
            return resendFailedMessagesCall(appId, endpointId, recoverIn, idempotencyKey, _callback);
        }

        private RecoverIn buildBodyParams() {
            RecoverIn recoverIn = new RecoverIn();
            recoverIn.since(this.since);
            recoverIn.until(this.until);
            return recoverIn;
        }

        /**
         * Execute resendFailedMessages request
         * @return RecoverOut
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public RecoverOut execute() throws ApiException {
            RecoverIn recoverIn = buildBodyParams();
            ApiResponse<RecoverOut> localVarResp = resendFailedMessagesWithHttpInfo(appId, endpointId, recoverIn, idempotencyKey);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute resendFailedMessages request with HTTP info returned
         * @return ApiResponse&lt;RecoverOut&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RecoverOut> executeWithHttpInfo() throws ApiException {
            RecoverIn recoverIn = buildBodyParams();
            return resendFailedMessagesWithHttpInfo(appId, endpointId, recoverIn, idempotencyKey);
        }

        /**
         * Execute resendFailedMessages request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RecoverOut> _callback) throws ApiException {
            RecoverIn recoverIn = buildBodyParams();
            return resendFailedMessagesAsync(appId, endpointId, recoverIn, idempotencyKey, _callback);
        }
    }

    /**
     * Recover Failed Webhooks
     * Resend all failed messages since a given time.
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param recoverIn  (required)
     * @return ResendFailedMessagesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public ResendFailedMessagesRequestBuilder resendFailedMessages(OffsetDateTime since, String appId, String endpointId) throws IllegalArgumentException {
        if (since == null) throw new IllegalArgumentException("\"since\" is required but got null");
        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            if (appId != null && appId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for appId. Length must be greater than or equal to 1.");
            }

        if (endpointId == null) throw new IllegalArgumentException("\"endpointId\" is required but got null");
            if (endpointId != null && endpointId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for endpointId. Length must be greater than or equal to 1.");
            }

        return new ResendFailedMessagesRequestBuilder(since, appId, endpointId);
    }
    private okhttp3.Call rotateSecretCall(String appId, String endpointId, EndpointSecretRotateIn endpointSecretRotateIn, String idempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = endpointSecretRotateIn;

        // create path and map variables
        String localVarPath = "/api/v1/app/{app_id}/endpoint/{endpoint_id}/secret/rotate"
            .replace("{" + "app_id" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "endpoint_id" + "}", localVarApiClient.escapeString(endpointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (idempotencyKey != null) {
            localVarHeaderParams.put("idempotency-key", localVarApiClient.parameterToString(idempotencyKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rotateSecretValidateBeforeCall(String appId, String endpointId, EndpointSecretRotateIn endpointSecretRotateIn, String idempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling rotateSecret(Async)");
        }

        // verify the required parameter 'endpointId' is set
        if (endpointId == null) {
            throw new ApiException("Missing the required parameter 'endpointId' when calling rotateSecret(Async)");
        }

        // verify the required parameter 'endpointSecretRotateIn' is set
        if (endpointSecretRotateIn == null) {
            throw new ApiException("Missing the required parameter 'endpointSecretRotateIn' when calling rotateSecret(Async)");
        }

        return rotateSecretCall(appId, endpointId, endpointSecretRotateIn, idempotencyKey, _callback);

    }


    private ApiResponse<Void> rotateSecretWithHttpInfo(String appId, String endpointId, EndpointSecretRotateIn endpointSecretRotateIn, String idempotencyKey) throws ApiException {
        okhttp3.Call localVarCall = rotateSecretValidateBeforeCall(appId, endpointId, endpointSecretRotateIn, idempotencyKey, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call rotateSecretAsync(String appId, String endpointId, EndpointSecretRotateIn endpointSecretRotateIn, String idempotencyKey, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = rotateSecretValidateBeforeCall(appId, endpointId, endpointSecretRotateIn, idempotencyKey, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RotateSecretRequestBuilder {
        private final String appId;
        private final String endpointId;
        private String key;
        private String idempotencyKey;

        private RotateSecretRequestBuilder(String appId, String endpointId) {
            this.appId = appId;
            this.endpointId = endpointId;
        }

        /**
         * Set key
         * @param key The endpoint&#39;s verification secret. If &#x60;null&#x60; is passed, a secret is automatically generated. Format: &#x60;base64&#x60; encoded random bytes optionally prefixed with &#x60;whsec_&#x60;. Recommended size: 24. (optional)
         * @return RotateSecretRequestBuilder
         */
        public RotateSecretRequestBuilder key(String key) {
            this.key = key;
            return this;
        }
        
        /**
         * Set idempotencyKey
         * @param idempotencyKey The request&#39;s idempotency key (optional)
         * @return RotateSecretRequestBuilder
         */
        public RotateSecretRequestBuilder idempotencyKey(String idempotencyKey) {
            this.idempotencyKey = idempotencyKey;
            return this;
        }
        
        /**
         * Build call for rotateSecret
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EndpointSecretRotateIn endpointSecretRotateIn = buildBodyParams();
            return rotateSecretCall(appId, endpointId, endpointSecretRotateIn, idempotencyKey, _callback);
        }

        private EndpointSecretRotateIn buildBodyParams() {
            EndpointSecretRotateIn endpointSecretRotateIn = new EndpointSecretRotateIn();
            endpointSecretRotateIn.key(this.key);
            return endpointSecretRotateIn;
        }

        /**
         * Execute rotateSecret request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            EndpointSecretRotateIn endpointSecretRotateIn = buildBodyParams();
            rotateSecretWithHttpInfo(appId, endpointId, endpointSecretRotateIn, idempotencyKey);
        }

        /**
         * Execute rotateSecret request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            EndpointSecretRotateIn endpointSecretRotateIn = buildBodyParams();
            return rotateSecretWithHttpInfo(appId, endpointId, endpointSecretRotateIn, idempotencyKey);
        }

        /**
         * Execute rotateSecret request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            EndpointSecretRotateIn endpointSecretRotateIn = buildBodyParams();
            return rotateSecretAsync(appId, endpointId, endpointSecretRotateIn, idempotencyKey, _callback);
        }
    }

    /**
     * Rotate Endpoint Secret
     * Rotates the endpoint&#39;s signing secret.  The previous secret will be valid for the next 24 hours.
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param endpointSecretRotateIn  (required)
     * @return RotateSecretRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
     </table>
     */
    public RotateSecretRequestBuilder rotateSecret(String appId, String endpointId) throws IllegalArgumentException {
        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            if (appId != null && appId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for appId. Length must be greater than or equal to 1.");
            }

        if (endpointId == null) throw new IllegalArgumentException("\"endpointId\" is required but got null");
            if (endpointId != null && endpointId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for endpointId. Length must be greater than or equal to 1.");
            }

        return new RotateSecretRequestBuilder(appId, endpointId);
    }
    private okhttp3.Call sendExampleMessageTypeCall(String appId, String endpointId, EventExampleIn eventExampleIn, String idempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = eventExampleIn;

        // create path and map variables
        String localVarPath = "/api/v1/app/{app_id}/endpoint/{endpoint_id}/send-example"
            .replace("{" + "app_id" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "endpoint_id" + "}", localVarApiClient.escapeString(endpointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (idempotencyKey != null) {
            localVarHeaderParams.put("idempotency-key", localVarApiClient.parameterToString(idempotencyKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendExampleMessageTypeValidateBeforeCall(String appId, String endpointId, EventExampleIn eventExampleIn, String idempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling sendExampleMessageType(Async)");
        }

        // verify the required parameter 'endpointId' is set
        if (endpointId == null) {
            throw new ApiException("Missing the required parameter 'endpointId' when calling sendExampleMessageType(Async)");
        }

        // verify the required parameter 'eventExampleIn' is set
        if (eventExampleIn == null) {
            throw new ApiException("Missing the required parameter 'eventExampleIn' when calling sendExampleMessageType(Async)");
        }

        return sendExampleMessageTypeCall(appId, endpointId, eventExampleIn, idempotencyKey, _callback);

    }


    private ApiResponse<MessageOut> sendExampleMessageTypeWithHttpInfo(String appId, String endpointId, EventExampleIn eventExampleIn, String idempotencyKey) throws ApiException {
        okhttp3.Call localVarCall = sendExampleMessageTypeValidateBeforeCall(appId, endpointId, eventExampleIn, idempotencyKey, null);
        Type localVarReturnType = new TypeToken<MessageOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call sendExampleMessageTypeAsync(String appId, String endpointId, EventExampleIn eventExampleIn, String idempotencyKey, final ApiCallback<MessageOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendExampleMessageTypeValidateBeforeCall(appId, endpointId, eventExampleIn, idempotencyKey, _callback);
        Type localVarReturnType = new TypeToken<MessageOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SendExampleMessageTypeRequestBuilder {
        private final String eventType;
        private final String appId;
        private final String endpointId;
        private String idempotencyKey;

        private SendExampleMessageTypeRequestBuilder(String eventType, String appId, String endpointId) {
            this.eventType = eventType;
            this.appId = appId;
            this.endpointId = endpointId;
        }

        /**
         * Set idempotencyKey
         * @param idempotencyKey The request&#39;s idempotency key (optional)
         * @return SendExampleMessageTypeRequestBuilder
         */
        public SendExampleMessageTypeRequestBuilder idempotencyKey(String idempotencyKey) {
            this.idempotencyKey = idempotencyKey;
            return this;
        }
        
        /**
         * Build call for sendExampleMessageType
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EventExampleIn eventExampleIn = buildBodyParams();
            return sendExampleMessageTypeCall(appId, endpointId, eventExampleIn, idempotencyKey, _callback);
        }

        private EventExampleIn buildBodyParams() {
            EventExampleIn eventExampleIn = new EventExampleIn();
            eventExampleIn.eventType(this.eventType);
            return eventExampleIn;
        }

        /**
         * Execute sendExampleMessageType request
         * @return MessageOut
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public MessageOut execute() throws ApiException {
            EventExampleIn eventExampleIn = buildBodyParams();
            ApiResponse<MessageOut> localVarResp = sendExampleMessageTypeWithHttpInfo(appId, endpointId, eventExampleIn, idempotencyKey);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute sendExampleMessageType request with HTTP info returned
         * @return ApiResponse&lt;MessageOut&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MessageOut> executeWithHttpInfo() throws ApiException {
            EventExampleIn eventExampleIn = buildBodyParams();
            return sendExampleMessageTypeWithHttpInfo(appId, endpointId, eventExampleIn, idempotencyKey);
        }

        /**
         * Execute sendExampleMessageType request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MessageOut> _callback) throws ApiException {
            EventExampleIn eventExampleIn = buildBodyParams();
            return sendExampleMessageTypeAsync(appId, endpointId, eventExampleIn, idempotencyKey, _callback);
        }
    }

    /**
     * Send Event Type Example Message
     * Send an example message for event
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param eventExampleIn  (required)
     * @return SendExampleMessageTypeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public SendExampleMessageTypeRequestBuilder sendExampleMessageType(String eventType, String appId, String endpointId) throws IllegalArgumentException {
        if (eventType == null) throw new IllegalArgumentException("\"eventType\" is required but got null");
            

        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            if (appId != null && appId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for appId. Length must be greater than or equal to 1.");
            }

        if (endpointId == null) throw new IllegalArgumentException("\"endpointId\" is required but got null");
            if (endpointId != null && endpointId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for endpointId. Length must be greater than or equal to 1.");
            }

        return new SendExampleMessageTypeRequestBuilder(eventType, appId, endpointId);
    }
    private okhttp3.Call setTransformationCodeCall(String appId, String endpointId, EndpointTransformationIn endpointTransformationIn, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = endpointTransformationIn;

        // create path and map variables
        String localVarPath = "/api/v1/app/{app_id}/endpoint/{endpoint_id}/transformation"
            .replace("{" + "app_id" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "endpoint_id" + "}", localVarApiClient.escapeString(endpointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setTransformationCodeValidateBeforeCall(String appId, String endpointId, EndpointTransformationIn endpointTransformationIn, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling setTransformationCode(Async)");
        }

        // verify the required parameter 'endpointId' is set
        if (endpointId == null) {
            throw new ApiException("Missing the required parameter 'endpointId' when calling setTransformationCode(Async)");
        }

        // verify the required parameter 'endpointTransformationIn' is set
        if (endpointTransformationIn == null) {
            throw new ApiException("Missing the required parameter 'endpointTransformationIn' when calling setTransformationCode(Async)");
        }

        return setTransformationCodeCall(appId, endpointId, endpointTransformationIn, _callback);

    }


    private ApiResponse<Void> setTransformationCodeWithHttpInfo(String appId, String endpointId, EndpointTransformationIn endpointTransformationIn) throws ApiException {
        okhttp3.Call localVarCall = setTransformationCodeValidateBeforeCall(appId, endpointId, endpointTransformationIn, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call setTransformationCodeAsync(String appId, String endpointId, EndpointTransformationIn endpointTransformationIn, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = setTransformationCodeValidateBeforeCall(appId, endpointId, endpointTransformationIn, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class SetTransformationCodeRequestBuilder {
        private final String appId;
        private final String endpointId;
        private String code;
        private Boolean enabled;

        private SetTransformationCodeRequestBuilder(String appId, String endpointId) {
            this.appId = appId;
            this.endpointId = endpointId;
        }

        /**
         * Set code
         * @param code  (optional)
         * @return SetTransformationCodeRequestBuilder
         */
        public SetTransformationCodeRequestBuilder code(String code) {
            this.code = code;
            return this;
        }
        
        /**
         * Set enabled
         * @param enabled  (optional)
         * @return SetTransformationCodeRequestBuilder
         */
        public SetTransformationCodeRequestBuilder enabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
        }
        
        /**
         * Build call for setTransformationCode
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EndpointTransformationIn endpointTransformationIn = buildBodyParams();
            return setTransformationCodeCall(appId, endpointId, endpointTransformationIn, _callback);
        }

        private EndpointTransformationIn buildBodyParams() {
            EndpointTransformationIn endpointTransformationIn = new EndpointTransformationIn();
            endpointTransformationIn.code(this.code);
            endpointTransformationIn.enabled(this.enabled);
            return endpointTransformationIn;
        }

        /**
         * Execute setTransformationCode request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            EndpointTransformationIn endpointTransformationIn = buildBodyParams();
            setTransformationCodeWithHttpInfo(appId, endpointId, endpointTransformationIn);
        }

        /**
         * Execute setTransformationCode request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            EndpointTransformationIn endpointTransformationIn = buildBodyParams();
            return setTransformationCodeWithHttpInfo(appId, endpointId, endpointTransformationIn);
        }

        /**
         * Execute setTransformationCode request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            EndpointTransformationIn endpointTransformationIn = buildBodyParams();
            return setTransformationCodeAsync(appId, endpointId, endpointTransformationIn, _callback);
        }
    }

    /**
     * Set Endpoint Transformation
     * Set or unset the transformation code associated with this endpoint
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param endpointTransformationIn  (required)
     * @return SetTransformationCodeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
     </table>
     */
    public SetTransformationCodeRequestBuilder setTransformationCode(String appId, String endpointId) throws IllegalArgumentException {
        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            if (appId != null && appId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for appId. Length must be greater than or equal to 1.");
            }

        if (endpointId == null) throw new IllegalArgumentException("\"endpointId\" is required but got null");
            if (endpointId != null && endpointId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for endpointId. Length must be greater than or equal to 1.");
            }

        return new SetTransformationCodeRequestBuilder(appId, endpointId);
    }
    private okhttp3.Call setWebhookHeadersCall(String appId, String endpointId, EndpointHeadersIn endpointHeadersIn, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = endpointHeadersIn;

        // create path and map variables
        String localVarPath = "/api/v1/app/{app_id}/endpoint/{endpoint_id}/headers"
            .replace("{" + "app_id" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "endpoint_id" + "}", localVarApiClient.escapeString(endpointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setWebhookHeadersValidateBeforeCall(String appId, String endpointId, EndpointHeadersIn endpointHeadersIn, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling setWebhookHeaders(Async)");
        }

        // verify the required parameter 'endpointId' is set
        if (endpointId == null) {
            throw new ApiException("Missing the required parameter 'endpointId' when calling setWebhookHeaders(Async)");
        }

        // verify the required parameter 'endpointHeadersIn' is set
        if (endpointHeadersIn == null) {
            throw new ApiException("Missing the required parameter 'endpointHeadersIn' when calling setWebhookHeaders(Async)");
        }

        return setWebhookHeadersCall(appId, endpointId, endpointHeadersIn, _callback);

    }


    private ApiResponse<Void> setWebhookHeadersWithHttpInfo(String appId, String endpointId, EndpointHeadersIn endpointHeadersIn) throws ApiException {
        okhttp3.Call localVarCall = setWebhookHeadersValidateBeforeCall(appId, endpointId, endpointHeadersIn, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call setWebhookHeadersAsync(String appId, String endpointId, EndpointHeadersIn endpointHeadersIn, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = setWebhookHeadersValidateBeforeCall(appId, endpointId, endpointHeadersIn, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class SetWebhookHeadersRequestBuilder {
        private final Map<String, String> headers;
        private final String appId;
        private final String endpointId;

        private SetWebhookHeadersRequestBuilder(Map<String, String> headers, String appId, String endpointId) {
            this.headers = headers;
            this.appId = appId;
            this.endpointId = endpointId;
        }

        /**
         * Build call for setWebhookHeaders
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EndpointHeadersIn endpointHeadersIn = buildBodyParams();
            return setWebhookHeadersCall(appId, endpointId, endpointHeadersIn, _callback);
        }

        private EndpointHeadersIn buildBodyParams() {
            EndpointHeadersIn endpointHeadersIn = new EndpointHeadersIn();
            endpointHeadersIn.headers(this.headers);
            return endpointHeadersIn;
        }

        /**
         * Execute setWebhookHeaders request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            EndpointHeadersIn endpointHeadersIn = buildBodyParams();
            setWebhookHeadersWithHttpInfo(appId, endpointId, endpointHeadersIn);
        }

        /**
         * Execute setWebhookHeaders request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            EndpointHeadersIn endpointHeadersIn = buildBodyParams();
            return setWebhookHeadersWithHttpInfo(appId, endpointId, endpointHeadersIn);
        }

        /**
         * Execute setWebhookHeaders request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            EndpointHeadersIn endpointHeadersIn = buildBodyParams();
            return setWebhookHeadersAsync(appId, endpointId, endpointHeadersIn, _callback);
        }
    }

    /**
     * Update Endpoint Headers
     * Set the additional headers to be sent with the webhook
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param endpointHeadersIn  (required)
     * @return SetWebhookHeadersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
     </table>
     */
    public SetWebhookHeadersRequestBuilder setWebhookHeaders(Map<String, String> headers, String appId, String endpointId) throws IllegalArgumentException {
        if (headers == null) throw new IllegalArgumentException("\"headers\" is required but got null");
        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            if (appId != null && appId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for appId. Length must be greater than or equal to 1.");
            }

        if (endpointId == null) throw new IllegalArgumentException("\"endpointId\" is required but got null");
            if (endpointId != null && endpointId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for endpointId. Length must be greater than or equal to 1.");
            }

        return new SetWebhookHeadersRequestBuilder(headers, appId, endpointId);
    }
    private okhttp3.Call updateEndpointByIdCall(String appId, String endpointId, EndpointUpdate endpointUpdate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = endpointUpdate;

        // create path and map variables
        String localVarPath = "/api/v1/app/{app_id}/endpoint/{endpoint_id}"
            .replace("{" + "app_id" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "endpoint_id" + "}", localVarApiClient.escapeString(endpointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateEndpointByIdValidateBeforeCall(String appId, String endpointId, EndpointUpdate endpointUpdate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling updateEndpointById(Async)");
        }

        // verify the required parameter 'endpointId' is set
        if (endpointId == null) {
            throw new ApiException("Missing the required parameter 'endpointId' when calling updateEndpointById(Async)");
        }

        // verify the required parameter 'endpointUpdate' is set
        if (endpointUpdate == null) {
            throw new ApiException("Missing the required parameter 'endpointUpdate' when calling updateEndpointById(Async)");
        }

        return updateEndpointByIdCall(appId, endpointId, endpointUpdate, _callback);

    }


    private ApiResponse<EndpointOut> updateEndpointByIdWithHttpInfo(String appId, String endpointId, EndpointUpdate endpointUpdate) throws ApiException {
        okhttp3.Call localVarCall = updateEndpointByIdValidateBeforeCall(appId, endpointId, endpointUpdate, null);
        Type localVarReturnType = new TypeToken<EndpointOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateEndpointByIdAsync(String appId, String endpointId, EndpointUpdate endpointUpdate, final ApiCallback<EndpointOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateEndpointByIdValidateBeforeCall(appId, endpointId, endpointUpdate, _callback);
        Type localVarReturnType = new TypeToken<EndpointOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateEndpointByIdRequestBuilder {
        private final URI url;
        private final String appId;
        private final String endpointId;
        private String description;
        private Integer version;
        private Integer rateLimit;
        private String uid;
        private Boolean disabled;
        private Set<String> filterTypes;
        private Set<String> channels;
        private Map<String, String> metadata;

        private UpdateEndpointByIdRequestBuilder(URI url, String appId, String endpointId) {
            this.url = url;
            this.appId = appId;
            this.endpointId = endpointId;
        }

        /**
         * Set description
         * @param description  (optional, default to )
         * @return UpdateEndpointByIdRequestBuilder
         */
        public UpdateEndpointByIdRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set version
         * @param version  (optional, default to 1)
         * @return UpdateEndpointByIdRequestBuilder
         */
        public UpdateEndpointByIdRequestBuilder version(Integer version) {
            this.version = version;
            return this;
        }
        
        /**
         * Set rateLimit
         * @param rateLimit  (optional)
         * @return UpdateEndpointByIdRequestBuilder
         */
        public UpdateEndpointByIdRequestBuilder rateLimit(Integer rateLimit) {
            this.rateLimit = rateLimit;
            return this;
        }
        
        /**
         * Set uid
         * @param uid Optional unique identifier for the endpoint (optional)
         * @return UpdateEndpointByIdRequestBuilder
         */
        public UpdateEndpointByIdRequestBuilder uid(String uid) {
            this.uid = uid;
            return this;
        }
        
        /**
         * Set disabled
         * @param disabled  (optional, default to false)
         * @return UpdateEndpointByIdRequestBuilder
         */
        public UpdateEndpointByIdRequestBuilder disabled(Boolean disabled) {
            this.disabled = disabled;
            return this;
        }
        
        /**
         * Set filterTypes
         * @param filterTypes  (optional)
         * @return UpdateEndpointByIdRequestBuilder
         */
        public UpdateEndpointByIdRequestBuilder filterTypes(Set<String> filterTypes) {
            this.filterTypes = filterTypes;
            return this;
        }
        
        /**
         * Set channels
         * @param channels List of message channels this endpoint listens to (omit for all) (optional)
         * @return UpdateEndpointByIdRequestBuilder
         */
        public UpdateEndpointByIdRequestBuilder channels(Set<String> channels) {
            this.channels = channels;
            return this;
        }
        
        /**
         * Set metadata
         * @param metadata  (optional)
         * @return UpdateEndpointByIdRequestBuilder
         */
        public UpdateEndpointByIdRequestBuilder metadata(Map<String, String> metadata) {
            this.metadata = metadata;
            return this;
        }
        
        /**
         * Build call for updateEndpointById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EndpointUpdate endpointUpdate = buildBodyParams();
            return updateEndpointByIdCall(appId, endpointId, endpointUpdate, _callback);
        }

        private EndpointUpdate buildBodyParams() {
            EndpointUpdate endpointUpdate = new EndpointUpdate();
            endpointUpdate.description(this.description);
            endpointUpdate.version(this.version);
            endpointUpdate.rateLimit(this.rateLimit);
            endpointUpdate.uid(this.uid);
            endpointUpdate.url(this.url);
            endpointUpdate.disabled(this.disabled);
            endpointUpdate.filterTypes(this.filterTypes);
            endpointUpdate.channels(this.channels);
            endpointUpdate.metadata(this.metadata);
            return endpointUpdate;
        }

        /**
         * Execute updateEndpointById request
         * @return EndpointOut
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public EndpointOut execute() throws ApiException {
            EndpointUpdate endpointUpdate = buildBodyParams();
            ApiResponse<EndpointOut> localVarResp = updateEndpointByIdWithHttpInfo(appId, endpointId, endpointUpdate);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateEndpointById request with HTTP info returned
         * @return ApiResponse&lt;EndpointOut&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EndpointOut> executeWithHttpInfo() throws ApiException {
            EndpointUpdate endpointUpdate = buildBodyParams();
            return updateEndpointByIdWithHttpInfo(appId, endpointId, endpointUpdate);
        }

        /**
         * Execute updateEndpointById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
            <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EndpointOut> _callback) throws ApiException {
            EndpointUpdate endpointUpdate = buildBodyParams();
            return updateEndpointByIdAsync(appId, endpointId, endpointUpdate, _callback);
        }
    }

    /**
     * Update Endpoint
     * Update an endpoint.
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param endpointUpdate  (required)
     * @return UpdateEndpointByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
     </table>
     */
    public UpdateEndpointByIdRequestBuilder updateEndpointById(URI url, String appId, String endpointId) throws IllegalArgumentException {
        if (url == null) throw new IllegalArgumentException("\"url\" is required but got null");
            if (url != null && url.length() < 1) {
              throw new IllegalArgumentException("Invalid value for url. Length must be greater than or equal to 1.");
            }

        if (appId == null) throw new IllegalArgumentException("\"appId\" is required but got null");
            if (appId != null && appId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for appId. Length must be greater than or equal to 1.");
            }

        if (endpointId == null) throw new IllegalArgumentException("\"endpointId\" is required but got null");
            if (endpointId != null && endpointId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for endpointId. Length must be greater than or equal to 1.");
            }

        return new UpdateEndpointByIdRequestBuilder(url, appId, endpointId);
    }
}
