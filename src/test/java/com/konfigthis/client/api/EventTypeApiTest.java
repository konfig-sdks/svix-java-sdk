/*
 * Svix API
 * Welcome to the Svix API documentation!  Useful links: [Homepage](https://www.svix.com) | [Support email](mailto:support+docs@svix.com) | [Blog](https://www.svix.com/blog/) | [Slack Community](https://www.svix.com/slack/)  # Introduction  This is the reference documentation and schemas for the [Svix webhook service](https://www.svix.com) API. For tutorials and other documentation please refer to [the documentation](https://docs.svix.com).  ## Main concepts  In Svix you have four important entities you will be interacting with:  - `messages`: these are the webhooks being sent. They can have contents and a few other properties. - `application`: this is where `messages` are sent to. Usually you want to create one application for each user on your platform. - `endpoint`: endpoints are the URLs messages will be sent to. Each application can have multiple `endpoints` and each message sent to that application will be sent to all of them (unless they are not subscribed to the sent event type). - `event-type`: event types are identifiers denoting the type of the message being sent. Event types are primarily used to decide which events are sent to which endpoint.   ## Authentication  Get your authentication token (`AUTH_TOKEN`) from the [Svix dashboard](https://dashboard.svix.com) and use it as part of the `Authorization` header as such: `Authorization: Bearer ${AUTH_TOKEN}`. For more information on authentication, please refer to the [authentication token docs](https://docs.svix.com/api-keys).     ## Code samples  The code samples assume you already have the respective libraries installed and you know how to use them. For the latest information on how to do that, please refer to [the documentation](https://docs.svix.com/).   ## Idempotency  Svix supports [idempotency](https://en.wikipedia.org/wiki/Idempotence) for safely retrying requests without accidentally performing the same operation twice. This is useful when an API call is disrupted in transit and you do not receive a response.  To perform an idempotent request, pass the idempotency key in the `Idempotency-Key` header to the request. The idempotency key should be a unique value generated by the client. You can create the key in however way you like, though we suggest using UUID v4, or any other string with enough entropy to avoid collisions.  Svix's idempotency works by saving the resulting status code and body of the first request made for any given idempotency key for any successful request. Subsequent requests with the same key return the same result for a period of up to 12 hours.  Please note that idempotency is only supported for `POST` requests.   ## Cross-Origin Resource Sharing  This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/). And that allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site. 
 *
 * The version of the OpenAPI document: 1.20.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.EventTypeImportOpenApiIn;
import com.konfigthis.client.model.EventTypeImportOpenApiOut;
import com.konfigthis.client.model.EventTypeIn;
import com.konfigthis.client.model.EventTypeOut;
import com.konfigthis.client.model.EventTypePatch;
import com.konfigthis.client.model.EventTypeUpdate;
import com.konfigthis.client.model.ListResponseEventTypeOut;
import com.konfigthis.client.model.Ordering;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EventTypeApi
 */
@Disabled
public class EventTypeApiTest {

    private static EventTypeApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new EventTypeApi(apiClient);
    }

    /**
     * Delete Event Type
     *
     * Archive an event type.  Endpoints already configured to filter on an event type will continue to do so after archival. However, new messages can not be sent with it and endpoints can not filter on it. An event type can be unarchived with the [create operation](#operation/create_event_type_api_v1_event_type__post).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void archiveTypeTest() throws ApiException {
        String eventTypeName = null;
        Boolean expunge = null;
        api.archiveType(eventTypeName)
                .expunge(expunge)
                .execute();
        // TODO: test validations
    }

    /**
     * Create Event Type
     *
     * Create new or unarchive existing event type.  Unarchiving an event type will allow endpoints to filter on it and messages to be sent with it. Endpoints filtering on the event type before archival will continue to filter on it. This operation does not preserve the description and schemas.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOrUpdateTest() throws ApiException {
        String description = null;
        String name = null;
        Boolean archived = null;
        Map<String, Object> schemas = null;
        String featureFlag = null;
        String idempotencyKey = null;
        EventTypeOut response = api.createOrUpdate(description, name)
                .archived(archived)
                .schemas(schemas)
                .featureFlag(featureFlag)
                .idempotencyKey(idempotencyKey)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Event Type
     *
     * Get an event type.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByNameTest() throws ApiException {
        String eventTypeName = null;
        EventTypeOut response = api.getByName(eventTypeName)
                .execute();
        // TODO: test validations
    }

    /**
     * List Event Types
     *
     * Return the list of event types.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getListTest() throws ApiException {
        Integer limit = null;
        String iterator = null;
        Ordering order = null;
        Boolean includeArchived = null;
        Boolean withContent = null;
        ListResponseEventTypeOut response = api.getList()
                .limit(limit)
                .iterator(iterator)
                .order(order)
                .includeArchived(includeArchived)
                .withContent(withContent)
                .execute();
        // TODO: test validations
    }

    /**
     * Event Type Import From Openapi
     *
     * Given an OpenAPI spec, create new or update existing event types. If an existing &#x60;archived&#x60; event type is updated, it will be unarchvied.  The importer will convert all webhooks found in the either the &#x60;webhooks&#x60; or &#x60;x-webhooks&#x60; top-level.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void importFromOpenapiTest() throws ApiException {
        Map<String, Object> spec = null;
        String specRaw = null;
        String idempotencyKey = null;
        EventTypeImportOpenApiOut response = api.importFromOpenapi()
                .spec(spec)
                .specRaw(specRaw)
                .idempotencyKey(idempotencyKey)
                .execute();
        // TODO: test validations
    }

    /**
     * Patch Event Type
     *
     * Partially update an event type.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void partiallyUpdateTypeTest() throws ApiException {
        String eventTypeName = null;
        String description = null;
        Boolean archived = null;
        Map<String, Object> schemas = null;
        String featureFlag = null;
        EventTypeOut response = api.partiallyUpdateType(eventTypeName)
                .description(description)
                .archived(archived)
                .schemas(schemas)
                .featureFlag(featureFlag)
                .execute();
        // TODO: test validations
    }

    /**
     * Update Event Type
     *
     * Update an event type.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTypeTest() throws ApiException {
        String description = null;
        String eventTypeName = null;
        Boolean archived = null;
        Map<String, Object> schemas = null;
        String featureFlag = null;
        EventTypeOut response = api.updateType(description, eventTypeName)
                .archived(archived)
                .schemas(schemas)
                .featureFlag(featureFlag)
                .execute();
        // TODO: test validations
    }

}
